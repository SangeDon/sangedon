<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sange</title>
  
  <subtitle>心即理</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sangedon.cn/"/>
  <updated>2020-11-14T10:11:58.816Z</updated>
  <id>https://sangedon.cn/</id>
  
  <author>
    <name>董先生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gitee上使用Jenkins流水线搭建</title>
    <link href="https://sangedon.cn/paper/Gitee%E4%B8%8A%E4%BD%BF%E7%94%A8Jenkins%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%90%AD%E5%BB%BA/"/>
    <id>https://sangedon.cn/paper/Gitee上使用Jenkins流水线搭建/</id>
    <published>2020-11-13T11:51:19.000Z</published>
    <updated>2020-11-14T10:11:58.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jenkins-安装"><a href="#Jenkins-安装" class="headerlink" title="Jenkins 安装"></a>Jenkins 安装</h2><blockquote><p>Jenkins使用docker-compose来部署安装，配置如下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: '3.7'</span><br><span class="line">service:</span><br><span class="line">  jenkins: </span><br><span class="line">  container_name: jenkins</span><br><span class="line">image: 'jenkinszh/jenkins-zh:lts'</span><br><span class="line">restart: always</span><br><span class="line">enviroment: </span><br><span class="line">    - TZ=Asia/Shanghai</span><br><span class="line">  ports:</span><br><span class="line">  - '8088:8080'</span><br><span class="line">  - '50000:50000'</span><br><span class="line">  volume: </span><br><span class="line">  - /opt/docker/jenkins/data:/var/jenkins_home</span><br><span class="line">  - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">  - /usr/bin/docker:/usr/bin/docker</span><br><span class="line">  - /usr/lib/x86_64-linux-gnu/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7</span><br><span class="line">  privileged: true</span><br><span class="line">  user: root</span><br></pre></td></tr></table></figure><h2 id="Gitee-插件安装"><a href="#Gitee-插件安装" class="headerlink" title="Gitee 插件安装"></a>Gitee 插件安装</h2><ol><li><p>在线安装</p><ul><li>前往 Manage Jenkins -&gt; Manage Plugins -&gt; Available</li><li>右侧 Filter 输入： Gitee</li><li>下方可选列表中勾选 Gitee（如列表中不存在 Gitee，则点击 Check now 更新插件列表）</li><li>点击 Download now and install after restart</li></ul></li><li><p>手动安装</p><ul><li>从 <a href="https://gitee.com/oschina/Gitee-Jenkins-Plugin/releases" target="_blank" rel="noopener">release</a> 列表中进入最新发行版，下载对应的 XXX.hpi 文件</li><li>前往 Manage Jenkins -&gt; Manage Plugins -&gt; Advanced</li><li>Upload Plugin File 中选择刚才下载的 XXX.hpi 点击 Upload</li><li>后续页面中勾选 Restart Jenkins when installation is complete and no jobs are running</li></ul></li></ol><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><h4 id="添加-Gitee-链接配置"><a href="#添加-Gitee-链接配置" class="headerlink" title="添加 Gitee 链接配置"></a>添加 Gitee 链接配置</h4><ol><li>前往 Jenkins -&gt; Manage Jenkins -&gt; Configure System -&gt; Gitee Configuration -&gt; Gitee connections</li><li>在 <code>Connection name</code> 中输入 <code>Gitee</code> 或者你想要的名字</li><li><code>Gitee host URL</code> 中输入 Gitee 完整 URL地址： <code>https://gitee.com</code> （Gitee 私有化客户输入部署的域名）</li><li><code>Credentials</code> 中如还未配置 <code>Gitee APIV5</code> 私人令牌，点击 Add <code>- &gt;</code>Jenkins<ol><li><code>Domain</code> 选择 <code>Global credentials</code></li><li><code>Kind</code> 选择 <code>Gitee API Token</code></li><li><code>Scope</code> 选择你需要的范围</li><li><code>Gitee API Token</code> 输入你的 Gitee 私人令牌，获取地址：<a href="https://gitee.com/profile/personal_access_tokens" target="_blank" rel="noopener">https://gitee.com/profile/personal_access_tokens</a></li><li><code>ID</code>, <code>Descripiton</code> 中输入你想要的 ID 和描述即可。</li></ol></li><li><code>Credentials</code> 选择配置好的 Gitee APIV5 Token</li><li>点击 <code>Advanced</code> ，可配置是否忽略 SSL 错误（视您的Jenkins环境是否支持），并可设置链接测超时时间（视您的网络环境而定）</li><li>点击 <code>Test Connection</code> 测试链接是否成功，如失败请检查以上 3，5，6 步骤。</li></ol><h2 id="配置节点"><a href="#配置节点" class="headerlink" title="配置节点"></a>配置节点</h2><ol><li>前往 Jenkins -&gt; 系统管理 -&gt; 节点管理 -&gt; 新建节点，填写节点名称，选择固定节点，或着复制现有节点（如果有的话）</li><li>上一步点击确定之后进入配置页面，如下</li></ol><p><img src="/paper/Gitee上使用Jenkins流水线搭建/./Gitee上使用Jenkins流水线搭建/image-20201114174244517.png" alt="新建节点配置"></p><ol start="3"><li>配置完成后连接节点，当节点显示在线时即节点成功连上</li></ol><p><img src="/paper/Gitee上使用Jenkins流水线搭建/./Gitee上使用Jenkins流水线搭建/image-20201114174505081.png" alt="上线节点"></p><h2 id="创建流水线任务"><a href="#创建流水线任务" class="headerlink" title="创建流水线任务"></a>创建流水线任务</h2><ol><li>前往 Jenkins -&gt; 新建任务， 填写任务名称后，选择创建自由风格的软件项目，点击确定，进入编辑页面</li><li>源码配置，如下</li></ol><p><img src="/paper/Gitee上使用Jenkins流水线搭建/./Gitee上使用Jenkins流水线搭建/image-20201114175133278.png" alt="源码配置"></p><ol start="3"><li>源码配置后简单的任务配置构建步骤即可，如下</li></ol><p><img src="/paper/Gitee上使用Jenkins流水线搭建/./Gitee上使用Jenkins流水线搭建/image-20201114175635225.png" alt="构建配置"></p><ol start="4"><li>运行任务，如下启动</li></ol><p><img src="/paper/Gitee上使用Jenkins流水线搭建/./Gitee上使用Jenkins流水线搭建/image-20201114175810580.png" alt="启动运行"></p><blockquote><p>如无问题，流水线创建成功！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jenkins-安装&quot;&gt;&lt;a href=&quot;#Jenkins-安装&quot; class=&quot;headerlink&quot; title=&quot;Jenkins 安装&quot;&gt;&lt;/a&gt;Jenkins 安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Jenkins使用docker-compose来部
      
    
    </summary>
    
      <category term="Devops" scheme="https://sangedon.cn/categories/Devops/"/>
    
    
      <category term="jenkins" scheme="https://sangedon.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>redis 笔记</title>
    <link href="https://sangedon.cn/paper/redis-%E7%AC%94%E8%AE%B0/"/>
    <id>https://sangedon.cn/paper/redis-笔记/</id>
    <published>2020-10-23T04:54:38.000Z</published>
    <updated>2020-10-23T05:10:22.305Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>官方介绍中表示Redis是一种开放源代码（BSD许可）的内存中数据结构存储，用作数据库，缓存和消息代理。它支持多种数据结构，例如字符串，哈希表，列表，集合，带范围查询的排序集，位图，超级日志，带有半径查询和流的地理空间索引。Redis具有内置的复制，Lua脚本，LRU驱逐，事务和不同级别的磁盘持久性，并可以通过Redis Sentinel和Redis Cluster自动分区提供高可用性。</p><blockquote><ol><li>随着用户量增大，请求数量也在不断增大，导致数据库压力也不断增大</li><li>多台服务器之间数据不同步</li><li>不同服务器之间的锁不存在互斥性</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;官方介绍中表示Redis是一种开放源代码（BSD许可）的内存中数据结构存储，用作数据库，缓存和消息代理。它支持多种数据结构，例如字符串，哈希表，列表，集合，带范围查询的排序集，位图，超级日志，带有半径查询和流的地理空间索引。Redis具有
      
    
    </summary>
    
      <category term="中间件" scheme="https://sangedon.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="缓存" scheme="https://sangedon.cn/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="redis" scheme="https://sangedon.cn/tags/redis/"/>
    
      <category term="笔记" scheme="https://sangedon.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mysql知识点总结</title>
    <link href="https://sangedon.cn/paper/Mysql%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://sangedon.cn/paper/Mysql知识点总结/</id>
    <published>2020-10-22T13:26:50.000Z</published>
    <updated>2020-10-22T14:35:11.843Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p><strong>作者：<a href="https://juejin.im/post/6850037271233331208" target="_blank" rel="noopener">贾不假</a></strong></p></blockquote><h2 id="一、MySQL架构"><a href="#一、MySQL架构" class="headerlink" title="一、MySQL架构"></a>一、MySQL架构</h2><p>和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎的架构上，<strong>插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离</strong>。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p><p><img src="/paper/Mysql知识点总结/1734bff308eb9e2d.png" alt="MySQL架构图"></p><ul><li><strong>连接层</strong>：最上层是一些客户端和连接服务。<strong>主要完成一些类似于连接处理、授权认证、及相关的安全方案</strong>。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</li><li><strong>服务层</strong>：第二层服务层，主要完成大部分的核心服务功能， 包括查询解析、分析、优化、缓存、以及所有的内置函数，所有跨存储引擎的功能也都在这一层实现，包括触发器、存储过程、视图等</li><li><strong>引擎层</strong>：第三层存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取</li><li><strong>存储层</strong>：第四层为数据存储层，主要是将数据存储在运行于该设备的文件系统之上，并完成与存储引擎的交互</li></ul><blockquote><p>画出 MySQL 架构图，这种变态问题都能问的出来</p><p>MySQL 的查询流程具体是？or  一条SQL语句在MySQL中如何执行的？</p></blockquote><p>客户端请求 —&gt; 连接器（验证用户身份，给予权限）  —&gt; 查询缓存（存在缓存则直接返回，不存在则执行后续操作） —&gt; 分析器（对SQL进行词法分析和语法分析操作）  —&gt; 优化器（主要对执行的sql优化选择最优的执行方案方法）  —&gt; 执行器（执行时会先看用户是否有执行权限，有才去使用这个引擎提供的接口） —&gt; 去引擎层获取数据返回（如果开启查询缓存则会缓存查询结果）</p><p><img src="/paper/Mysql知识点总结/1734bff309fc730f.png" alt="查询流程图"></p><hr><blockquote><p>说说MySQL有哪些存储引擎？都有哪些区别？</p></blockquote><h2 id="二、存储引擎"><a href="#二、存储引擎" class="headerlink" title="二、存储引擎"></a>二、存储引擎</h2><p>存储引擎是MySQL的组件，用于处理不同表类型的SQL操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎，还可以获得特定的功能。</p><p>使用哪一种引擎可以灵活选择，<strong>一个数据库中多个表可以使用不同引擎以满足各种性能和实际需求</strong>，使用合适的存储引擎，将会提高整个数据库的性能 。</p><p>MySQL服务器使用<strong>可插拔</strong>的存储引擎体系结构，可以从运行中的 MySQL 服务器加载或卸载存储引擎 。</p><h3 id="查看存储引擎"><a href="#查看存储引擎" class="headerlink" title="查看存储引擎"></a>查看存储引擎</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 查看支持的存储引擎</span><br><span class="line">SHOW ENGINES</span><br><span class="line"></span><br><span class="line">-- 查看默认存储引擎</span><br><span class="line">SHOW VARIABLES LIKE &apos;storage_engine&apos;</span><br><span class="line"></span><br><span class="line">--查看具体某一个表所使用的存储引擎，这个默认存储引擎被修改了！</span><br><span class="line">show create table tablename</span><br><span class="line"></span><br><span class="line">--准确查看某个数据库中的某一表所使用的存储引擎</span><br><span class="line">show table status like &apos;tablename&apos;</span><br><span class="line">show table status from database where name=&quot;tablename&quot;</span><br></pre></td></tr></table></figure><h3 id="设置存储引擎"><a href="#设置存储引擎" class="headerlink" title="设置存储引擎"></a>设置存储引擎</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 建表时指定存储引擎。默认的就是INNODB，不需要设置</span><br><span class="line">CREATE TABLE t1 (i INT) ENGINE = INNODB;</span><br><span class="line">CREATE TABLE t2 (i INT) ENGINE = CSV;</span><br><span class="line">CREATE TABLE t3 (i INT) ENGINE = MEMORY;</span><br><span class="line"></span><br><span class="line">-- 修改存储引擎</span><br><span class="line">ALTER TABLE t ENGINE = InnoDB;</span><br><span class="line"></span><br><span class="line">-- 修改默认存储引擎，也可以在配置文件my.cnf中修改默认引擎</span><br><span class="line">SET default_storage_engine=NDBCLUSTER;</span><br></pre></td></tr></table></figure><p>默认情况下，每当 <code>CREATE TABLE</code> 或 <code>ALTER TABLE</code> 不能使用默认存储引擎时，都会生成一个警告。为了防止在所需的引擎不可用时出现令人困惑的意外行为，可以启用 <code>NO_ENGINE_SUBSTITUTION SQL</code> 模式。如果所需的引擎不可用，则此设置将产生错误而不是警告，并且不会创建或更改表</p><h3 id="存储引擎对比"><a href="#存储引擎对比" class="headerlink" title="存储引擎对比"></a>存储引擎对比</h3><p>常见的存储引擎就 InnoDB、MyISAM、Memory、NDB。</p><p>InnoDB 现在是 MySQL 默认的存储引擎，支持<strong>事务、行级锁定和外键</strong></p><h4 id="文件存储结构对比"><a href="#文件存储结构对比" class="headerlink" title="文件存储结构对比"></a>文件存储结构对比</h4><p>在 MySQL中建立任何一张数据表，在其数据目录对应的数据库目录下都有对应表的 <code>.frm</code> 文件，<code>.frm</code> 文件是用来保存每个数据表的元数据(meta)信息，包括表结构的定义等，与数据库存储引擎无关，也就是任何存储引擎的数据表都必须有<code>.frm</code>文件，命名方式为 数据表名.frm，如user.frm。</p><p>查看MySQL 数据保存在哪里：<code>show variables like &#39;data%&#39;</code></p><p>MyISAM 物理文件结构为：</p><ul><li><code>.frm</code>文件：与表相关的元数据信息都存放在frm文件，包括表结构的定义信息等</li><li><code>.MYD</code> (<code>MYData</code>) 文件：MyISAM 存储引擎专用，用于存储MyISAM 表的数据</li><li><code>.MYI</code> (<code>MYIndex</code>)文件：MyISAM 存储引擎专用，用于存储MyISAM 表的索引相关信息</li></ul><p>InnoDB 物理文件结构为：</p><ul><li><p><code>.frm</code> 文件：与表相关的元数据信息都存放在frm文件，包括表结构的定义信息等</p></li><li><p><code>.ibd</code> 文件或 <code>.ibdata</code> 文件： 这两种文件都是存放 InnoDB 数据的文件，之所以有两种文件形式存放 InnoDB 的数据，是因为 InnoDB 的数据存储方式能够通过配置来决定是使用<strong>共享表空间</strong>存放存储数据，还是用<strong>独享表空间</strong>存放存储数据。</p><p>独享表空间存储方式使用<code>.ibd</code>文件，并且每个表一个<code>.ibd</code>文件 共享表空间存储方式使用<code>.ibdata</code>文件，所有表共同使用一个<code>.ibdata</code>文件（或多个，可自己配置）</p></li></ul><blockquote><p>ps：正经公司，这些都有专业运维去做，数据备份、恢复啥的，让我一个 Javaer 搞这的话，加钱不？</p></blockquote><h4 id="面试这么回答"><a href="#面试这么回答" class="headerlink" title="面试这么回答"></a>面试这么回答</h4><ol><li>InnoDB 支持事务，MyISAM 不支持事务。这是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</li><li>InnoDB 支持外键，而 MyISAM 不支持。对一个包含外键的 InnoDB 表转为 MYISAM 会失败；</li><li>InnoDB 是聚簇索引，MyISAM 是非聚簇索引。聚簇索引的文件存放在主键索引的叶子节点上，因此 InnoDB 必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而 MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</li><li>InnoDB 不保存表的具体行数，执行<code>select count(*) from table</code> 时需要全表扫描。而 MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；</li><li>InnoDB 最小的锁粒度是行锁，MyISAM 最小的锁粒度是表锁。一个更新语句会锁住整张表，导致其他查询和更新都会被阻塞，因此并发访问受限。这也是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</li></ol><table><thead><tr><th>对比项</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>主外键</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>行表锁</td><td>表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td><td>行锁,操作时只锁某一行，不对其它行有影响，适合高并发的操作</td></tr><tr><td>缓存</td><td>只缓存索引，不缓存真实数据</td><td>不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td></tr><tr><td>表空间</td><td>小</td><td>大</td></tr><tr><td>关注点</td><td>性能</td><td>事务</td></tr><tr><td>默认安装</td><td>是</td><td>是</td></tr></tbody></table><blockquote><p>一张表，里面有ID自增主键，当insert了17条记录之后，删除了第15,16,17条记录，再把Mysql重启，再insert一条记录，这条记录的ID是18还是15 ？</p></blockquote><p>如果表的类型是MyISAM，那么是18。因为MyISAM表会把自增主键的最大ID 记录到数据文件中，重启MySQL自增主键的最大ID也不会丢失；</p><p>如果表的类型是InnoDB，那么是15。因为InnoDB 表只是把自增主键的最大ID记录到内存中，所以重启数据库或对表进行OPTION操作，都会导致最大ID丢失。</p><blockquote><p>哪个存储引擎执行 select count(*) 更快，为什么?</p></blockquote><p>MyISAM更快，因为MyISAM内部维护了一个计数器，可以直接调取。</p><ul><li>在 MyISAM 存储引擎中，把表的总行数存储在磁盘上，当执行 select count(*) from t 时，直接返回总数据。</li><li>在 InnoDB 存储引擎中，跟 MyISAM 不一样，没有将总行数存储在磁盘上，当执行 select count(*) from t 时，会先把数据读出来，一行一行的累加，最后返回总数量。</li></ul><p>InnoDB 中 count(*) 语句是在执行的时候，全表扫描统计总数量，所以当数据越来越大时，语句就越来越耗时了，为什么 InnoDB 引擎不像 MyISAM 引擎一样，将总行数存储到磁盘上？这跟 InnoDB 的事务特性有关，由于多版本并发控制（MVCC）的原因，InnoDB 表“应该返回多少行”也是不确定的。</p><h2 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h2><p>主要包括以下五大类：</p><ul><li>整数类型：BIT、BOOL、TINY INT、SMALL INT、MEDIUM INT、 INT、 BIG INT</li><li>浮点数类型：FLOAT、DOUBLE、DECIMAL</li><li>字符串类型：CHAR、VARCHAR、TINY TEXT、TEXT、MEDIUM TEXT、LONGTEXT、TINY BLOB、BLOB、MEDIUM BLOB、LONG BLOB</li><li>日期类型：Date、DateTime、TimeStamp、Time、Year</li><li>其他数据类型：BINARY、VARBINARY、ENUM、SET、Geometry、Point、MultiPoint、LineString、MultiLineString、Polygon、GeometryCollection等</li></ul><p><img src="/paper/Mysql知识点总结/1734bff30a28cf0d.png" alt="整形"></p><p><img src="/paper/Mysql知识点总结/1734bff309f9eea0.png" alt="时间类型"></p><p><img src="/paper/Mysql知识点总结/1734bff30a5e00fe.png" alt="字符串类型"></p><blockquote><p>CHAR 和 VARCHAR 的区别？</p></blockquote><p>char是固定长度，varchar长度可变：</p><p>char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p><p>存储时，前者不管实际存储数据的长度，直接按 char 规定的长度分配存储空间；而后者会根据实际存储的数据分配最终的存储空间</p><p>相同点：</p><ol><li>char(n)，varchar(n)中的n都代表字符的个数</li><li>超过char，varchar最大长度n的限制后，字符串会被截断。</li></ol><p>不同点：</p><ol><li>char不论实际存储的字符数都会占用n个字符的空间，而varchar只会占用实际字符应该占用的字节空间加1（实际长度length，0&lt;=length&lt;255）或加2（length&gt;255）。因为varchar保存数据时除了要保存字符串之外还会加一个字节来记录长度（如果列声明长度大于255则使用两个字节来保存长度）。</li><li>能存储的最大空间限制不一样：char的存储上限为255字节。</li><li>char在存储时会截断尾部的空格，而varchar不会。</li></ol><p>char是适合存储很短的、一般固定长度的字符串。例如，char非常适合存储密码的MD5值，因为这是一个定长的值。对于非常短的列，char比varchar在存储空间上也更有效率。</p><blockquote><p>列的字符串类型可以是什么？</p></blockquote><p>字符串类型是：SET、BLOB、ENUM、CHAR、TEXT、VARCHAR</p><blockquote><p>BLOB和TEXT有什么区别？</p></blockquote><p>BLOB是一个二进制对象，可以容纳可变数量的数据。有四种类型的BLOB：TINYBLOB、BLOB、MEDIUMBLO和 LONGBLOB</p><p>TEXT是一个不区分大小写的BLOB。四种TEXT类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。</p><p>BLOB 保存二进制数据，TEXT 保存字符数据。</p><hr><h2 id="四、索引"><a href="#四、索引" class="headerlink" title="四、索引"></a>四、索引</h2><blockquote><p>说说你对 MySQL 索引的理解？</p><p>数据库索引的原理，为什么要用 B+树，为什么不用二叉树？</p><p>聚集索引与非聚集索引的区别？</p><p>InnoDB引擎中的索引策略，了解过吗？</p><p>创建索引的方式有哪些？</p><p>聚簇索引/非聚簇索引，mysql索引底层实现，为什么不用B-tree，为什么不用hash，叶子结点存放的是数据还是指向数据的内存地址，使用索引需要注意的几个地方？</p></blockquote><ul><li><p>MYSQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构，所以说<strong>索引的本质是：数据结构</strong></p></li><li><p>索引的目的在于提高查询效率，可以类比字典、 火车站的车次表、图书的目录等 。</p></li><li><p>可以简单的理解为“排好序的快速查找数据结构”，数据本身之外，<strong>数据库还维护者一个满足特定查找算法的数据结构</strong>，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。下图是一种可能的索引方式示例。</p><p><img src="/paper/Mysql知识点总结/1734bff356f9f2f0.png" alt="索引简图"></p></li></ul><p>  左边的数据表，一共有两列七条记录，最左边的是数据记录的物理地址</p><p>  为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值，和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在一定的复杂度内获取到对应的数据，从而快速检索出符合条件的记录。</p><ul><li><p>索引本身也很大，不可能全部存储在内存中，<strong>一般以索引文件的形式存储在磁盘上</strong></p></li><li><p>平常说的索引，没有特别指明的话，就是B+树（多路搜索树，不一定是二叉树）结构组织的索引。其中聚集索引，次要索引，覆盖索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。此外还有哈希索引等。</p></li></ul><h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><ul><li><p>创建：</p><ul><li><p>创建索引：<code>CREATE [UNIQUE] INDEX indexName ON mytable(username(length));</code></p><p>如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</p></li><li><p>修改表结构(添加索引)：<code>ALTER table tableName ADD [UNIQUE] INDEX indexName(columnName)</code></p></li></ul></li><li><p>删除：<code>DROP INDEX [indexName] ON mytable;</code></p></li><li><p>查看：<code>SHOW INDEX FROM table_name\G</code>             –可以通过添加 \G 来格式化输出信息。</p></li><li><p>使用ALERT命令</p><ul><li><code>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list):</code> 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</li><li><code>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list</code> 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</li><li><code>ALTER TABLE tbl_name ADD INDEX index_name (column_list)</code> 添加普通索引，索引值可出现多次。</li><li><code>ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list)</code>该语句指定了索引为 FULLTEXT ，用于全文索引。</li></ul></li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li><strong>提高数据检索效率，降低数据库IO成本</strong></li><li><strong>降低数据排序的成本，降低CPU的消耗</strong></li></ul><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul><li>索引也是一张表，保存了主键和索引字段，并指向实体表的记录，所以也需要占用内存</li><li>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。 因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段， 都会调整因为更新所带来的键值变化后的索引信息</li></ul><h3 id="MySQL索引分类"><a href="#MySQL索引分类" class="headerlink" title="MySQL索引分类"></a>MySQL索引分类</h3><h4 id="数据结构角度"><a href="#数据结构角度" class="headerlink" title="数据结构角度"></a>数据结构角度</h4><ul><li>B+树索引</li><li>Hash索引</li><li>Full-Text全文索引</li><li>R-Tree索引</li></ul><h4 id="从物理存储角度"><a href="#从物理存储角度" class="headerlink" title="从物理存储角度"></a>从物理存储角度</h4><ul><li><p>聚集索引（clustered index）</p></li><li><p>非聚集索引（non-clustered index），也叫辅助索引（secondary index）</p><p>聚集索引和非聚集索引都是B+树结构</p></li></ul><h4 id="从逻辑角度"><a href="#从逻辑角度" class="headerlink" title="从逻辑角度"></a>从逻辑角度</h4><ul><li>主键索引：主键索引是一种特殊的唯一索引，不允许有空值</li><li>普通索引或者单列索引：每个索引只包含单个列，一个表可以有多个单列索引</li><li>多列索引（复合索引、联合索引）：复合索引指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用复合索引时遵循最左前缀集合</li><li>唯一索引或者非唯一索引</li><li>空间索引：空间索引是对空间数据类型的字段建立的索引，MYSQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING、POLYGON。 MYSQL使用SPATIAL关键字进行扩展，使得能够用于创建正规索引类型的语法创建空间索引。创建空间索引的列，必须将其声明为NOT NULL，空间索引只能在存储引擎为MYISAM的表中创建</li></ul><blockquote><p>为什么MySQL 索引中用B+tree，不用B-tree 或者其他树，为什么不用 Hash 索引</p><p>聚簇索引/非聚簇索引，MySQL 索引底层实现，叶子结点存放的是数据还是指向数据的内存地址，使用索引需要注意的几个地方？</p><p>使用索引查询一定能提高查询的性能吗？为什么?</p></blockquote><h3 id="MySQL索引结构"><a href="#MySQL索引结构" class="headerlink" title="MySQL索引结构"></a>MySQL索引结构</h3><p><strong>首先要明白索引（index）是在存储引擎（storage engine）层面实现的，而不是server层面</strong>。不是所有的存储引擎都支持所有的索引类型。即使多个存储引擎支持某一索引类型，它们的实现和行为也可能有所差别。</p><h4 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B+Tree索引"></a>B+Tree索引</h4><p>MyISAM 和 InnoDB 存储引擎，都使用 B+Tree的数据结构，它相对与 B-Tree结构，所有的数据都存放在叶子节点上，且把叶子节点通过指针连接到一起，形成了一条数据链表，以加快相邻数据的检索效率。</p><p><strong>先了解下 B-Tree 和 B+Tree 的区别</strong></p><h5 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h5><p>B-Tree是为磁盘等外存储设备设计的一种平衡查找树。</p><p>系统从磁盘读取数据到内存时是以磁盘块（block）为基本单位的，位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么。</p><p>InnoDB 存储引擎中有页（Page）的概念，页是其磁盘管理的最小单位。InnoDB 存储引擎中默认每个页的大小为16KB，可通过参数 <code>innodb_page_size</code> 将页的大小设置为 4K、8K、16K，在 MySQL 中可通过如下命令查看页的大小：<code>show variables like &#39;innodb_page_size&#39;;</code></p><p>而系统一个磁盘块的存储空间往往没有这么大，因此 InnoDB 每次申请磁盘空间时都会是若干地址连续磁盘块来达到页的大小 16KB。InnoDB 在把磁盘数据读入到磁盘时会以页为基本单位，在查询数据时如果一个页中的每条数据都能有助于定位数据记录的位置，这将会减少磁盘I/O次数，提高查询效率。</p><p>B-Tree 结构的数据可以让系统高效的找到数据所在的磁盘块。为了描述 B-Tree，首先定义一条记录为一个二元组[key, data] ，key为记录的键值，对应表中的主键值，data 为一行记录中除主键外的数据。对于不同的记录，key值互不相同。</p><p>一棵m阶的B-Tree有如下特性：</p><ol><li>每个节点最多有m个孩子</li><li>除了根节点和叶子节点外，其它每个节点至少有Ceil(m/2)个孩子。</li><li>若根节点不是叶子节点，则至少有2个孩子</li><li>所有叶子节点都在同一层，且不包含其它关键字信息</li><li>每个非终端节点包含n个关键字信息（P0,P1,…Pn, k1,…kn）</li><li>关键字的个数n满足：ceil(m/2)-1 &lt;= n &lt;= m-1</li><li>ki(i=1,…n)为关键字，且关键字升序排序</li><li>Pi(i=1,…n)为指向子树根节点的指针。P(i-1)指向的子树的所有节点关键字均小于ki，但都大于k(i-1)</li></ol><p>B-Tree 中的每个节点根据实际情况可以包含大量的关键字信息和分支，如下图所示为一个 3 阶的 B-Tree：</p><p><img src="/paper/Mysql知识点总结/1734bff356b40f0d.png" alt="B-Tree"></p><p>每个节点占用一个盘块的磁盘空间，一个节点上有两个升序排序的关键字和三个指向子树根节点的指针，指针存储的是子节点所在磁盘块的地址。两个关键词划分成的三个范围域对应三个指针指向的子树的数据的范围域。以根节点为例，关键字为17和35，P1指针指向的子树的数据范围为小于17，P2指针指向的子树的数据范围为17~35，P3指针指向的子树的数据范围为大于35。</p><p>模拟查找关键字29的过程：</p><ol><li>根据根节点找到磁盘块1，读入内存。【磁盘I/O操作第1次】</li><li>比较关键字29在区间（17,35），找到磁盘块1的指针P2。</li><li>根据P2指针找到磁盘块3，读入内存。【磁盘I/O操作第2次】</li><li>比较关键字29在区间（26,30），找到磁盘块3的指针P2。</li><li>根据P2指针找到磁盘块8，读入内存。【磁盘I/O操作第3次】</li><li>在磁盘块8中的关键字列表中找到关键字29。</li></ol><p>分析上面过程，发现需要3次磁盘I/O操作，和3次内存查找操作。由于内存中的关键字是一个有序表结构，可以利用二分法查找提高效率。而3次磁盘I/O操作是影响整个B-Tree查找效率的决定因素。B-Tree相对于AVLTree缩减了节点个数，使每次磁盘I/O取到内存的数据都发挥了作用，从而提高了查询效率。</p><h5 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h5><p>B+Tree 是在 B-Tree 基础上的一种优化，使其更适合实现外存储索引结构，InnoDB 存储引擎就是用 B+Tree 实现其索引结构。</p><p>从上一节中的B-Tree结构图中可以看到每个节点中不仅包含数据的key值，还有data值。而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小，当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I/O次数，进而影响查询效率。在B+Tree中，<strong>所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上</strong>，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+Tree的高度。</p><p>B+Tree相对于B-Tree有几点不同：</p><ol><li>非叶子节点只存储键值信息；</li><li>所有叶子节点之间都有一个链指针；</li><li>数据记录都存放在叶子节点中</li></ol><p>将上一节中的B-Tree优化，由于B+Tree的非叶子节点只存储键值信息，假设每个磁盘块能存储4个键值及指针信息，则变成B+Tree后其结构如下图所示：</p><p><img src="/paper/Mysql知识点总结/1734bff3498c6715.png" alt="B+Tree"></p><p>通常在B+Tree上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。因此可以对B+Tree进行两种查找运算：一种是对于主键的范围查找和分页查找，另一种是从根节点开始，进行随机查找。</p><p>可能上面例子中只有22条数据记录，看不出B+Tree的优点，下面做一个推算：</p><p>InnoDB存储引擎中页的大小为16KB，一般表的主键类型为INT（占用4个字节）或BIGINT（占用8个字节），指针类型也一般为4或8个字节，也就是说一个页（B+Tree中的一个节点）中大概存储16KB/(8B+8B)=1K个键值（因为是估值，为方便计算，这里的K取值为10^3）。也就是说一个深度为3的B+Tree索引可以维护10^3 <em> 10^3 </em> 10^3 = 10亿 条记录。</p><p>实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree的高度一般都在2-4层。MySQL的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1~3次磁盘I/O操作。</p><p>B+Tree性质</p><ol><li>通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</li><li>当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即<strong>索引的最左匹配特性</strong>。</li></ol><h5 id="MyISAM主键索引与辅助索引的结构"><a href="#MyISAM主键索引与辅助索引的结构" class="headerlink" title="MyISAM主键索引与辅助索引的结构"></a>MyISAM主键索引与辅助索引的结构</h5><p>MyISAM引擎的索引文件和数据文件是分离的。<strong>MyISAM引擎索引结构的叶子节点的数据域，存放的并不是实际的数据记录，而是数据记录的地址</strong>。索引文件与数据文件分离，这样的索引称为”<strong>非聚簇索引</strong>“。MyISAM的主索引与辅助索引区别并不大，只是主键索引不能有重复的关键字。</p><p><img src="/paper/Mysql知识点总结/1734bff35bbbf112.png" alt="非聚簇索引"></p><p>在MyISAM中，索引（含叶子节点）存放在单独的.myi文件中，叶子节点存放的是数据的物理地址偏移量（通过偏移量访问就是随机访问，速度很快）。</p><p>主索引是指主键索引，键值不可能重复；辅助索引则是普通索引，键值可能重复。</p><p>通过索引查找数据的流程：先从索引文件中查找到索引节点，从中拿到数据的文件指针，再到数据文件中通过文件指针定位了具体的数据。辅助索引类似。</p><h5 id="InnoDB主键索引与辅助索引的结构"><a href="#InnoDB主键索引与辅助索引的结构" class="headerlink" title="InnoDB主键索引与辅助索引的结构"></a>InnoDB主键索引与辅助索引的结构</h5><p><strong>InnoDB引擎索引结构的叶子节点的数据域，存放的就是实际的数据记录</strong>（对于主索引，此处会存放表中所有的数据记录；对于辅助索引此处会引用主键，检索的时候通过主键到主键索引中找到对应数据行），或者说，<strong>InnoDB的数据文件本身就是主键索引文件</strong>，这样的索引被称为”“聚簇索引”，一个表只能有一个聚簇索引。</p><h6 id="主键索引："><a href="#主键索引：" class="headerlink" title="主键索引："></a>主键索引：</h6><p>我们知道InnoDB索引是聚集索引，它的索引和数据是存入同一个.idb文件中的，因此它的索引结构是在同一个树节点中同时存放索引和数据，如下图中最底层的叶子节点有三行数据，对应于数据表中的id、stu_id、name数据项。</p><p><img src="/paper/Mysql知识点总结/1734bff337681c17.png" alt="聚簇索引"></p><p>在Innodb中，索引分叶子节点和非叶子节点，非叶子节点就像新华字典的目录，单独存放在索引段中，叶子节点则是顺序排列的，在数据段中。Innodb的数据文件可以按照表来切分（只需要开启<code>innodb_file_per_table)</code>，切分后存放在<code>xxx.ibd</code>中，默认不切分，存放在<code>xxx.ibdata</code>中。</p><h6 id="辅助（非主键）索引："><a href="#辅助（非主键）索引：" class="headerlink" title="辅助（非主键）索引："></a>辅助（非主键）索引：</h6><p>这次我们以示例中学生表中的name列建立辅助索引，它的索引结构跟主键索引的结构有很大差别，在最底层的叶子结点有两行数据，第一行的字符串是辅助索引，按照ASCII码进行排序，第二行的整数是主键的值。</p><p>这就意味着，对name列进行条件搜索，需要两个步骤：</p><p>① 在辅助索引上检索name，到达其叶子节点获取对应的主键；</p><p>② 使用主键在主索引上再进行对应的检索操作</p><p>这也就是所谓的“<strong>回表查询</strong>”</p><p><img src="/paper/Mysql知识点总结/1734bff365f39d10.png" alt="辅助索引"></p><p><strong>InnoDB 索引结构需要注意的点</strong></p><ol><li>数据文件本身就是索引文件</li><li>表数据文件本身就是按 B+Tree 组织的一个索引结构文件</li><li>聚集索引中叶节点包含了完整的数据记录</li><li>InnoDB 表必须要有主键，并且推荐使用整型自增主键</li></ol><p>正如我们上面介绍 InnoDB 存储结构，索引与数据是共同存储的，不管是主键索引还是辅助索引，在查找时都是通过先查找到索引节点才能拿到相对应的数据，如果我们在设计表结构时没有显式指定索引列的话，MySQL 会从表中选择数据不重复的列建立索引，如果没有符合的列，则 MySQL 自动为 InnoDB 表生成一个隐含字段作为主键，并且这个字段长度为6个字节，类型为整型。</p><blockquote><p>那为什么推荐使用整型自增主键而不是选择UUID？</p></blockquote><ul><li>UUID是字符串，比整型消耗更多的存储空间；</li><li>在B+树中进行查找时需要跟经过的节点值比较大小，整型数据的比较运算比字符串更快速；</li><li>自增的整型索引在磁盘中会连续存储，在读取一页数据时也是连续；UUID是随机产生的，读取的上下两行数据存储是分散的，不适合执行where id &gt; 5 &amp;&amp; id &lt; 20的条件查询语句。</li><li>在插入或删除数据时，整型自增主键会在叶子结点的末尾建立新的叶子节点，不会破坏左侧子树的结构；UUID主键很容易出现这样的情况，B+树为了维持自身的特性，有可能会进行结构的重构，消耗更多的时间。</li></ul><blockquote><p>为什么非主键索引结构叶子节点存储的是主键值？</p></blockquote><p>保证数据一致性和节省存储空间，可以这么理解：商城系统订单表会存储一个用户ID作为关联外键，而不推荐存储完整的用户信息，因为当我们用户表中的信息（真实名称、手机号、收货地址···）修改后，不需要再次维护订单表的用户数据，同时也节省了存储空间。</p><h4 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h4><ul><li><p>主要就是通过Hash算法（常见的Hash算法有直接定址法、平方取中法、折叠法、除数取余法、随机数法），将数据库字段数据转换成定长的Hash值，与这条数据的行指针一并存入Hash表的对应位置；如果发生Hash碰撞（两个不同关键字的Hash值相同），则在对应Hash键下以链表形式存储。</p><p>检索算法：在检索查询时，就再次对待查关键字再次执行相同的Hash算法，得到Hash值，到对应Hash表对应位置取出数据即可，如果发生Hash碰撞，则需要在取值时进行筛选。目前使用Hash索引的数据库并不多，主要有Memory等。</p><p>MySQL目前有Memory引擎和NDB引擎支持Hash索引。</p></li></ul><h4 id="full-text全文索引"><a href="#full-text全文索引" class="headerlink" title="full-text全文索引"></a>full-text全文索引</h4><ul><li>全文索引也是MyISAM的一种特殊索引类型，主要用于全文索引，InnoDB从MYSQL5.6版本提供对全文索引的支持。</li><li>它用于替代效率较低的LIKE模糊匹配操作，而且可以通过多字段组合的全文索引一次性全模糊匹配多个字段。</li><li>同样使用B-Tree存放索引数据，但使用的是特定的算法，将字段数据分割后再进行索引（一般每4个字节一次分割），索引文件存储的是分割前的索引字符串集合，与分割后的索引信息，对应Btree结构的节点存储的是分割后的词信息以及它在分割前的索引字符串集合中的位置。</li></ul><h4 id="R-Tree空间索引"><a href="#R-Tree空间索引" class="headerlink" title="R-Tree空间索引"></a>R-Tree空间索引</h4><p>空间索引是MyISAM的一种特殊索引类型，主要用于地理空间数据类型</p><blockquote><p>为什么Mysql索引要用B+树不是B树？</p></blockquote><p>用B+树不用B树考虑的是IO对性能的影响，B树的每个节点都存储数据，而B+树只有叶子节点才存储数据，所以查找相同数据量的情况下，B树的高度更高，IO更频繁。数据库索引是存储在磁盘上的，当数据量大时，就不能把整个索引全部加载到内存了，只能逐一加载每一个磁盘页（对应索引树的节点）。其中在MySQL底层对B+树进行进一步优化：在叶子节点中是双向链表，且在链表的头结点和尾节点也是循环指向的。</p><blockquote><p>面试官：为何不采用Hash方式？</p></blockquote><p>因为Hash索引底层是哈希表，哈希表是一种以key-value存储数据的结构，所以多个数据在存储关系上是完全没有任何顺序关系的，所以，对于区间查询是无法直接通过索引查询的，就需要全表扫描。所以，哈希索引只适用于等值查询的场景。而B+ Tree是一种多路平衡查询树，所以他的节点是天然有序的（左子节点小于父节点、父节点小于右子节点），所以对于范围查询的时候不需要做全表扫描。</p><p>哈希索引不支持多列联合索引的最左匹配规则，如果有大量重复键值得情况下，哈希索引的效率会很低，因为存在哈希碰撞问题。</p><h3 id="哪些情况需要创建索引"><a href="#哪些情况需要创建索引" class="headerlink" title="哪些情况需要创建索引"></a>哪些情况需要创建索引</h3><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段</li><li>查询中与其他表关联的字段，外键关系建立索引</li><li>单键/组合索引的选择问题，高并发下倾向创建组合索引</li><li>查询中排序的字段，排序字段通过索引访问大幅提高排序速度</li><li>查询中统计或分组字段</li></ol><h3 id="哪些情况不要创建索引"><a href="#哪些情况不要创建索引" class="headerlink" title="哪些情况不要创建索引"></a>哪些情况不要创建索引</h3><ol><li>表记录太少</li><li>经常增删改的表</li><li>数据重复且分布均匀的表字段，只应该为最经常查询和最经常排序的数据列建立索引（如果某个数据类包含太多的重复数据，建立索引没有太大意义）</li><li>频繁更新的字段不适合创建索引（会加重IO负担）</li><li>where条件里用不到的字段不创建索引</li></ol><h3 id="MySQL高效索引"><a href="#MySQL高效索引" class="headerlink" title="MySQL高效索引"></a>MySQL高效索引</h3><p><strong>覆盖索引</strong>（Covering Index）,或者叫索引覆盖， 也就是平时所说的不需要回表操作</p><ul><li><p>就是select的数据列只用从索引中就能够取得，不必读取数据行，MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件，换句话说<strong>查询列要被所建的索引覆盖</strong>。</p></li><li><p>索引是高效找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据，因此它不必读取整个行。毕竟索引叶子节点存储了它们索引的数据，当能通过读取索引就可以得到想要的数据，那就不需要读取行了。一个索引包含（覆盖）满足查询结果的数据就叫做覆盖索引。</p></li><li><p><strong>判断标准</strong></p><p>使用explain，可以通过输出的extra列来判断，对于一个索引覆盖查询，显示为<strong>using index</strong>，MySQL查询优化器在执行查询前会决定是否有索引覆盖查询</p></li></ul><h2 id="五、MySQL查询"><a href="#五、MySQL查询" class="headerlink" title="五、MySQL查询"></a>五、MySQL查询</h2><blockquote><p>count(*) 和 count(1)和count(列名)区别   ps：这道题说法有点多</p></blockquote><p>执行效果上：</p><ul><li>count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL</li><li>count(1)包括了所有列，用1代表代码行，在统计结果的时候，不会忽略列值为NULL</li><li>count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者0，而是表示null）的计数，即某个字段值为NULL时，不统计。</li></ul><p>执行效率上：</p><ul><li>列名为主键，count(列名)会比count(1)快</li><li>列名不为主键，count(1)会比count(列名)快</li><li>如果表多个列并且没有主键，则 count(1) 的执行效率优于 count(*)</li><li>如果有主键，则 select count（主键）的执行效率是最优的</li><li>如果表只有一个字段，则 select count(*) 最优。</li></ul><blockquote><p>MySQL中 in和 exists 的区别？</p></blockquote><ul><li>exists：exists对外表用loop逐条查询，每次查询都会查看exists的条件语句，当exists里的条件语句能够返回记录行时（无论记录行是的多少，只要能返回），条件就为真，返回当前loop到的这条记录；反之，如果exists里的条件语句不能返回记录行，则当前loop到的这条记录被丢弃，exists的条件就像一个bool条件，当能返回结果集则为true，不能返回结果集则为false</li><li>in：in查询相当于多个or条件的叠加</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM A WHERE A.id IN (SELECT id FROM B);</span><br><span class="line">SELECT * FROM A WHERE EXISTS (SELECT * from B WHERE B.id = A.id);</span><br></pre></td></tr></table></figure><p><strong>如果查询的两个表大小相当，那么用in和exists差别不大</strong>。</p><p>如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in：</p><blockquote><p>UNION和UNION ALL的区别?</p></blockquote><p>UNION和UNION ALL都是将两个结果集合并为一个，<strong>两个要联合的SQL语句 字段个数必须一样，而且字段类型要“相容”（一致）；</strong></p><ul><li>UNION在进行表连接后会筛选掉重复的数据记录（效率较低），而UNION ALL则不会去掉重复的数据记录；</li><li>UNION会按照字段的顺序进行排序，而UNION ALL只是简单的将两个结果合并就返回；</li></ul><h3 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h3><ul><li><p>手写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT &lt;select_list&gt;</span><br><span class="line">FROM  &lt;left_table&gt; &lt;join_type&gt;</span><br><span class="line">JOIN  &lt;right_table&gt; ON &lt;join_condition&gt;</span><br><span class="line">WHERE  &lt;where_condition&gt;</span><br><span class="line">GROUP BY  &lt;group_by_list&gt;</span><br><span class="line">HAVING &lt;having_condition&gt;</span><br><span class="line">ORDER BY &lt;order_by_condition&gt;</span><br><span class="line">LIMIT &lt;limit_number&gt;</span><br></pre></td></tr></table></figure></li><li><p>机读</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM  &lt;left_table&gt;</span><br><span class="line">ON &lt;join_condition&gt;</span><br><span class="line">&lt;join_type&gt; JOIN  &lt;right_table&gt; </span><br><span class="line">WHERE  &lt;where_condition&gt;</span><br><span class="line">GROUP BY  &lt;group_by_list&gt;</span><br><span class="line">HAVING &lt;having_condition&gt;</span><br><span class="line">SELECT</span><br><span class="line">DISTINCT &lt;select_list&gt;</span><br><span class="line">ORDER BY &lt;order_by_condition&gt;</span><br><span class="line">LIMIT &lt;limit_number&gt;</span><br></pre></td></tr></table></figure></li><li><p>总结</p><p><img src="/paper/Mysql知识点总结/1734bff368752ece.png" alt="SQL执行顺序"></p></li></ul><blockquote><p>mysql 的内连接、左连接、右连接有什么区别？</p><p>什么是内连接、外连接、交叉连接、笛卡尔积呢？</p></blockquote><h3 id="Join图"><a href="#Join图" class="headerlink" title="Join图"></a>Join图</h3><p><img src="/paper/Mysql知识点总结/1734bff37ac0e7f6.png" alt="连接示例图"></p><hr><h2 id="六、MySQL-事务"><a href="#六、MySQL-事务" class="headerlink" title="六、MySQL 事务"></a>六、MySQL 事务</h2><blockquote><p>事务的隔离级别有哪些？MySQL的默认隔离级别是什么？</p><p>什么是幻读，脏读，不可重复读呢？</p><p>MySQL事务的四大特性以及实现原理</p><p>MVCC熟悉吗，它的底层原理？</p></blockquote><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p><h3 id="ACID-—-事务基本要素"><a href="#ACID-—-事务基本要素" class="headerlink" title="ACID — 事务基本要素"></a>ACID — 事务基本要素</h3><p><img src="/paper/Mysql知识点总结/1734bff377ece423.png" alt="ACID"></p><p>事务是由一组SQL语句组成的逻辑处理单元，具有4个属性，通常简称为事务的ACID属性。</p><ul><li><strong>A (Atomicity) 原子性</strong>：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样</li><li><strong>C (Consistency) 一致性</strong>：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏</li><li><strong>I (Isolation)隔离性</strong>：一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰</li><li><strong>D (Durability) 持久性</strong>：在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚</li></ul><p><strong>并发事务处理带来的问题</strong></p><ul><li>更新丢失（Lost Update)： 事务A和事务B选择同一行，然后基于最初选定的值更新该行时，由于两个事务都不知道彼此的存在，就会发生丢失更新问题</li><li>脏读(Dirty Reads)：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li><li>不可重复读（Non-Repeatable Reads)：事务 A 多次读取同一数据，事务B在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</li><li>幻读（Phantom Reads)：幻读与不可重复读类似。它发生在一个事务A读取了几行数据，接着另一个并发事务B插入了一些数据时。在随后的查询中，事务A就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</li></ul><p><strong>幻读和不可重复读的区别：</strong></p><ul><li><strong>不可重复读的重点是修改</strong>：在同一事务中，同样的条件，第一次读的数据和第二次读的数据不一样。（因为中间有其他事务提交了修改）</li><li><strong>幻读的重点在于新增或者删除</strong>：在同一事务中，同样的条件,，第一次和第二次读出来的记录数不一样。（因为中间有其他事务提交了插入/删除）</li></ul><p><strong>并发事务处理带来的问题的解决办法：</strong></p><ul><li>“更新丢失”通常是应该完全避免的。但防止更新丢失，并不能单靠数据库事务控制器来解决，需要应用程序对要更新的数据加必要的锁来解决，因此，防止更新丢失应该是应用的责任。</li><li>“脏读” 、 “不可重复读”和“幻读” ，其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决：<ul><li>一种是加锁：在读取数据前，对其加锁，阻止其他事务对数据进行修改。</li><li>另一种是数据多版本并发控制（MultiVersion Concurrency Control，简称 <strong>MVCC</strong> 或 MCC），也称为多版本数据库：不用加任何锁， 通过一定机制生成一个数据请求时间点的一致性数据快照 （Snapshot)， 并用这个快照来提供一定级别 （语句级或事务级） 的一致性读取。从用户的角度来看，好象是数据库可以提供同一数据的多个版本。</li></ul></li></ul><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>数据库事务的隔离级别有4种，由低到高分别为</p><ul><li><strong>READ-UNCOMMITTED(读未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li><li><strong>READ-COMMITTED(读已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li><li><strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li><li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li></ul><p>查看当前数据库的事务隔离级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;tx_isolation&apos;</span><br></pre></td></tr></table></figure><p>下面通过事例一一阐述在事务的并发操作中可能会出现脏读，不可重复读，幻读和事务隔离级别的联系。</p><p>数据库的事务隔离越严格，并发副作用越小，但付出的代价就越大，因为事务隔离实质上就是使事务在一定程度上“串行化”进行，这显然与“并发”是矛盾的。同时，不同的应用对读一致性和事务隔离程度的要求也是不同的，比如许多应用对“不可重复读”和“幻读”并不敏感，可能更关心数据并发访问的能力。</p><h4 id="Read-uncommitted"><a href="#Read-uncommitted" class="headerlink" title="Read uncommitted"></a>Read uncommitted</h4><p>读未提交，就是一个事务可以读取另一个未提交事务的数据。</p><p>事例：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。</p><p>分析：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。</p><p>那怎么解决脏读呢？Read committed！读提交，能解决脏读问题。</p><h4 id="Read-committed"><a href="#Read-committed" class="headerlink" title="Read committed"></a>Read committed</h4><p>读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。</p><p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…</p><p>分析：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是<strong>不可重复读</strong>。</p><p>那怎么解决可能的不可重复读问题？Repeatable read ！</p><h4 id="Repeatable-read"><a href="#Repeatable-read" class="headerlink" title="Repeatable read"></a>Repeatable read</h4><p>重复读，就是在开始读取数据（事务开启）时，不再允许修改操作。 <strong>MySQL的默认事务隔离级别</strong> </p><p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。</p><p>分析：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，<strong>不可重复读对应的是修改，即UPDATE操作。但是可能还会有幻读问题。因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作</strong>。</p><p><strong>什么时候会出现幻读？</strong></p><p>事例：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即新增INSERT了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。</p><p>那怎么解决幻读问题？Serializable！</p><h4 id="Serializable-序列化"><a href="#Serializable-序列化" class="headerlink" title="Serializable 序列化"></a>Serializable 序列化</h4><p>Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。简单来说，Serializable会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用问题。这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。</p><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><table><thead><tr><th>事务隔离级别</th><th>读数据一致性</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交（read-uncommitted）</td><td>最低级被，只能保证不读取物理上损坏的数据</td><td>是</td><td>是</td><td>是</td></tr><tr><td>读已提交（read-committed）</td><td>语句级</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读（repeatable-read）</td><td>事务级</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行化（serializable）</td><td>最高级别，事务级</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><p>需要说明的是，事务隔离级别和数据访问的并发性是对立的，事务隔离级别越高并发性就越差。所以要根据具体的应用来确定合适的事务隔离级别，这个地方没有万能的原则。</p><p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong>。我们可以通过<code>SELECT @@tx_isolation;</code>命令来查看，MySQL 8.0 该命令改为<code>SELECT @@transaction_isolation;</code></p><p>这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 <strong>REPEATABLE-READ（可重读）</strong>事务隔离级别下使用的是Next-Key Lock 算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读）已经可以完全保证事务的隔离性要求，即达到了 SQL标准的 <strong>SERIALIZABLE(可串行化)</strong>隔离级别，而且保留了比较好的并发性能。</p><p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是<strong>READ-COMMITTED(读已提交):</strong>，但是你要知道的是InnoDB 存储引擎默认使用 <strong>REPEATABLE-READ（可重读）</strong>并不会有任何性能损失。</p><h3 id="MVCC-多版本并发控制"><a href="#MVCC-多版本并发控制" class="headerlink" title="MVCC 多版本并发控制"></a>MVCC 多版本并发控制</h3><p>MySQL的大多数事务型存储引擎实现都不是简单的行级锁。基于提升并发性考虑，一般都同时实现了多版本并发控制（MVCC），包括Oracle、PostgreSQL。只是实现机制各不相同。</p><p>可以认为 MVCC 是行级锁的一个变种，但它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只是锁定必要的行。</p><p>MVCC 的实现是通过保存数据在某个时间点的快照来实现的。也就是说不管需要执行多长时间，每个事物看到的数据都是一致的。</p><p>典型的MVCC实现方式，分为<strong>乐观（optimistic）并发控制和悲观（pressimistic）并发控制</strong>。下边通过 InnoDB的简化版行为来说明 MVCC 是如何工作的。</p><p>InnoDB 的 MVCC，是通过在每行记录后面保存两个隐藏的列来实现。这两个列，一个保存了行的创建时间，一个保存行的过期时间（删除时间）。当然存储的并不是真实的时间，而是系统版本号（system version number）。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。</p><p><strong>REPEATABLE READ（可重读）隔离级别下MVCC如何工作：</strong></p><ul><li><p>SELECT</p><p>InnoDB会根据以下两个条件检查每行记录：</p><ul><li>InnoDB只查找版本早于当前事务版本的数据行，这样可以确保事务读取的行，要么是在开始事务之前已经存在要么是事务自身插入或者修改过的</li><li>行的删除版本号要么未定义，要么大于当前事务版本号，这样可以确保事务读取到的行在事务开始之前未被删除</li></ul><p>只有符合上述两个条件的才会被查询出来</p></li><li><p>INSERT：InnoDB为新插入的每一行保存当前系统版本号作为行版本号</p></li><li><p>DELETE：InnoDB为删除的每一行保存当前系统版本号作为行删除标识</p></li><li><p>UPDATE：InnoDB为插入的一行新纪录保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为删除标识</p></li></ul><p>保存这两个额外系统版本号，使大多数操作都不用加锁。使数据操作简单，性能很好，并且也能保证只会读取到符合要求的行。不足之处是每行记录都需要额外的存储空间，需要做更多的行检查工作和一些额外的维护工作。</p><p>MVCC 只在 COMMITTED READ（读提交）和REPEATABLE READ（可重复读）两种隔离级别下工作。</p><h3 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h3><p>InnoDB 使用日志来减少提交事务时的开销。因为日志中已经记录了事务，就无须在每个事务提交时把缓冲池的脏块刷新(flush)到磁盘中。</p><p>事务修改的数据和索引通常会映射到表空间的随机位置，所以刷新这些变更到磁盘需要很多随机 IO。</p><p>InnoDB 假设使用常规磁盘，随机IO比顺序IO昂贵得多，因为一个IO请求需要时间把磁头移到正确的位置，然后等待磁盘上读出需要的部分，再转到开始位置。</p><p>InnoDB 用日志把随机IO变成顺序IO。一旦日志安全写到磁盘，事务就持久化了，即使断电了，InnoDB可以重放日志并且恢复已经提交的事务。</p><p>InnoDB 使用一个后台线程智能地刷新这些变更到数据文件。这个线程可以批量组合写入，使得数据写入更顺序，以提高效率。</p><p>事务日志可以帮助提高事务效率：</p><ul><li>使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘上的事务日志中，而不用每次都将修改的数据本身持久到磁盘。</li><li>事务日志采用的是追加的方式，因此写日志的操作是磁盘上一小块区域内的顺序I/O，而不像随机I/O需要在磁盘的多个地方移动磁头，所以采用事务日志的方式相对来说要快得多。</li><li>事务日志持久以后，内存中被修改的数据在后台可以慢慢刷回到磁盘。</li><li>如果数据的修改已经记录到事务日志并持久化，但数据本身没有写回到磁盘，此时系统崩溃，存储引擎在重启时能够自动恢复这一部分修改的数据。</li></ul><p>目前来说，大多数存储引擎都是这样实现的，我们通常称之为<strong>预写式日志</strong>（Write-Ahead Logging），修改数据需要写两次磁盘。</p><h3 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h3><p>事务的实现是基于数据库的存储引擎。不同的存储引擎对事务的支持程度不一样。MySQL 中支持事务的存储引擎有 InnoDB 和 NDB。</p><p>事务的实现就是如何实现ACID特性。</p><p>事务的隔离性是通过锁实现，而事务的原子性、一致性和持久性则是通过事务日志实现 。</p><blockquote><p>事务是如何通过日志来实现的，说得越深入越好。</p></blockquote><p>事务日志包括：<strong>重做日志redo</strong>和<strong>回滚日志undo</strong></p><ul><li><p><strong>redo log（重做日志</strong>） 实现持久化和原子性</p><p>在innoDB的存储引擎中，事务日志通过重做(redo)日志和innoDB存储引擎的日志缓冲(InnoDB Log Buffer)实现。事务开启时，事务中的操作，都会先写入存储引擎的日志缓冲中，在事务提交之前，这些缓冲的日志都需要提前刷新到磁盘上持久化，这就是DBA们口中常说的“日志先行”(Write-Ahead Logging)。当事务提交之后，在Buffer Pool中映射的数据文件才会慢慢刷新到磁盘。此时如果数据库崩溃或者宕机，那么当系统重启进行恢复时，就可以根据redo log中记录的日志，把数据库恢复到崩溃前的一个状态。未完成的事务，可以继续提交，也可以选择回滚，这基于恢复的策略而定。</p><p>在系统启动的时候，就已经为redo log分配了一块连续的存储空间，以顺序追加的方式记录Redo Log，通过顺序IO来改善性能。所有的事务共享redo log的存储空间，它们的Redo Log按语句的执行顺序，依次交替的记录在一起。</p></li><li><p><strong>undo log（回滚日志）</strong>  实现一致性</p><p>undo log 主要为事务的回滚服务。在事务执行的过程中，除了记录redo log，还会记录一定量的undo log。undo log记录了数据在每个操作前的状态，如果事务执行过程中需要回滚，就可以根据undo log进行回滚操作。单个事务的回滚，只会回滚当前事务做的操作，并不会影响到其他的事务做的操作。</p><p>Undo记录的是已部分完成并且写入硬盘的未完成的事务，默认情况下回滚日志是记录下表空间中的（共享表空间或者独享表空间）</p></li></ul><p>二种日志均可以视为一种恢复操作，redo_log是恢复提交事务修改的页操作，而undo_log是回滚行记录到特定版本。二者记录的内容也不同，redo_log是物理日志，记录页的物理修改操作，而undo_log是逻辑日志，根据每行记录进行记录。</p><blockquote><p>又引出个问题：你知道MySQL 有多少种日志吗？</p></blockquote><ul><li><strong>错误日志</strong>：记录出错信息，也记录一些警告信息或者正确的信息。</li><li><strong>查询日志</strong>：记录所有对数据库请求的信息，不论这些请求是否得到了正确的执行。</li><li><strong>慢查询日志</strong>：设置一个阈值，将运行时间超过该值的所有SQL语句都记录到慢查询的日志文件中。</li><li><strong>二进制日志</strong>：记录对数据库执行更改的所有操作。</li><li><strong>中继日志</strong>：中继日志也是二进制日志，用来给slave 库恢复</li><li><strong>事务日志</strong>：重做日志redo和回滚日志undo</li></ul><blockquote><p>分布式事务相关问题，可能还会问到 2PC、3PC，，，</p></blockquote><h3 id="MySQL对分布式事务的支持"><a href="#MySQL对分布式事务的支持" class="headerlink" title="MySQL对分布式事务的支持"></a>MySQL对分布式事务的支持</h3><p>分布式事务的实现方式有很多，既可以采用 InnoDB 提供的原生的事务支持，也可以采用消息队列来实现分布式事务的最终一致性。这里我们主要聊一下 InnoDB 对分布式事务的支持。</p><p>MySQL 从 5.0.3  InnoDB 存储引擎开始支持XA协议的分布式事务。一个分布式事务会涉及多个行动，这些行动本身是事务性的。所有行动都必须一起成功完成，或者一起被回滚。</p><p>在MySQL中，使用分布式事务涉及一个或多个资源管理器和一个事务管理器。</p><p><img src="/paper/Mysql知识点总结/1734bff37e532a33.png" alt="分布式事务模型"></p><p>如图，MySQL 的分布式事务模型。模型中分三块：应用程序（AP）、资源管理器（RM）、事务管理器（TM）:</p><ul><li>应用程序：定义了事务的边界，指定需要做哪些事务；</li><li>资源管理器：提供了访问事务的方法，通常一个数据库就是一个资源管理器；</li><li>事务管理器：协调参与了全局事务中的各个事务。</li></ul><p>分布式事务采用两段式提交（two-phase commit）的方式：</p><ul><li>第一阶段所有的事务节点开始准备，告诉事务管理器ready。</li><li>第二阶段事务管理器告诉每个节点是commit还是rollback。如果有一个节点失败，就需要全局的节点全部rollback，以此保障事务的原子性。</li></ul><hr><h2 id="七、MySQL锁机制"><a href="#七、MySQL锁机制" class="headerlink" title="七、MySQL锁机制"></a>七、MySQL锁机制</h2><blockquote><p>数据库的乐观锁和悲观锁？</p><p>MySQL 中有哪几种锁，列举一下？</p><p>MySQL中InnoDB引擎的行锁是怎么实现的？</p><p>MySQL 间隙锁有没有了解，死锁有没有了解，写一段会造成死锁的 sql 语句，死锁发生了如何解决，MySQL 有没有提供什么机制去解决死锁</p></blockquote><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p><p>在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。数据库锁定机制简单来说，就是数据库为了保证数据的一致性，而使各种共享资源在被并发访问变得有序所设计的一种规则。</p><p>打个比方，我们到淘宝上买一件商品，商品只有一件库存，这个时候如果还有另一个人买，那么如何解决是你买到还是另一个人买到的问题？这里肯定要用到事物，我们先从库存表中取出物品数量，然后插入订单，付款后插入付款表信息，然后更新商品数量。在这个过程中，使用锁可以对有限的资源进行保护，解决隔离和并发的矛盾。</p><h3 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h3><p><strong>从对数据操作的类型分类</strong>：</p><ul><li><strong>读锁</strong>（共享锁）：针对同一份数据，多个读操作可以同时进行，不会互相影响</li><li><strong>写锁</strong>（排他锁）：当前写操作没有完成前，它会阻断其他写锁和读锁</li></ul><p><strong>从对数据操作的粒度分类</strong>：</p><p>为了尽可能提高数据库的并发度，每次锁定的数据范围越小越好，理论上每次只锁定当前操作的数据的方案会得到最大的并发度，但是管理锁是很耗资源的事情（涉及获取，检查，释放锁等动作），因此数据库系统需要在高并发响应和系统性能两方面进行平衡，这样就产生了“锁粒度（Lock granularity）”的概念。</p><ul><li><strong>表级锁</strong>：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低（MyISAM 和 MEMORY 存储引擎采用的是表级锁）；</li><li><strong>行级锁</strong>：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高（InnoDB 存储引擎既支持行级锁也支持表级锁，但默认情况下是采用行级锁）；</li><li><strong>页面锁</strong>：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</li></ul><p>适用：从锁的角度来说，表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理（OLTP）系统。</p><table><thead><tr><th>引擎</th><th>行锁</th><th>表锁</th><th>页锁</th></tr></thead><tbody><tr><td>MyISAM</td><td></td><td>√</td><td></td></tr><tr><td>BDB</td><td></td><td>√</td><td>√</td></tr><tr><td>InnoDB</td><td>√</td><td>√</td><td></td></tr><tr><td>Memory</td><td></td><td>√</td></tr></tbody></table><h3 id="MyISAM-表锁"><a href="#MyISAM-表锁" class="headerlink" title="MyISAM 表锁"></a>MyISAM 表锁</h3><p>MyISAM 的表锁有两种模式：</p><ul><li>表共享读锁 （Table Read Lock）：不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；</li><li>表独占写锁 （Table Write Lock）：会阻塞其他用户对同一表的读和写操作；</li></ul><p>MyISAM 表的读操作与写操作之间，以及写操作之间是串行的。当一个线程获得对一个表的写锁后， 只有持有锁的线程可以对表进行更新操作。 其他线程的读、 写操作都会等待，直到锁被释放为止。</p><p>默认情况下，写锁比读锁具有更高的优先级：当一个锁释放时，这个锁会优先给写锁队列中等候的获取锁请求，然后再给读锁队列中等候的获取锁请求。</p><h3 id="InnoDB-行锁"><a href="#InnoDB-行锁" class="headerlink" title="InnoDB 行锁"></a>InnoDB 行锁</h3><p>InnoDB 实现了以下两种类型的<strong>行锁</strong>：</p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。</li><li>排他锁（X）：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。</li></ul><p>为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB 还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是<strong>表锁</strong>：</p><ul><li>意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的 IS 锁。</li><li>意向排他锁（IX）：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的 IX 锁。</li></ul><p><strong>索引失效会导致行锁变表锁</strong>。比如 vchar 查询不写单引号的情况。</p><h4 id="加锁机制"><a href="#加锁机制" class="headerlink" title="加锁机制"></a>加锁机制</h4><p><strong>乐观锁与悲观锁是两种并发控制的思想，可用于解决丢失更新问题</strong></p><p>乐观锁会“乐观地”假定大概率不会发生并发更新冲突，访问、处理数据过程中不加锁，只在更新数据时再根据版本号或时间戳判断是否有冲突，有则处理，无则提交事务。用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式</p><p>悲观锁会“悲观地”假定大概率会发生并发更新冲突，访问、处理数据前就加排他锁，在整个数据处理过程中锁定数据，事务提交或回滚后才释放锁。另外与乐观锁相对应的，<strong>悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了。</strong></p><h4 id="锁模式-InnoDB有三种行锁的算法"><a href="#锁模式-InnoDB有三种行锁的算法" class="headerlink" title="锁模式(InnoDB有三种行锁的算法)"></a>锁模式(InnoDB有三种行锁的算法)</h4><ul><li><p><strong>记录锁(Record Locks)</strong>： 单个行记录上的锁。对索引项加锁，锁定符合条件的行。其他事务不能修改和删除加锁项；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table WHERE id = 1 FOR UPDATE;</span><br></pre></td></tr></table></figure><p>它会在 id=1 的记录上加上记录锁，以阻止其他事务插入，更新，删除 id=1 这一行</p><p>在通过 主键索引 与 唯一索引 对数据行进行 UPDATE 操作时，也会对该行数据加记录锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- id 列为主键列或唯一索引列</span><br><span class="line">UPDATE SET age = 50 WHERE id = 1;</span><br></pre></td></tr></table></figure></li><li><p><strong>间隙锁（Gap Locks）</strong>： 当我们使用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁。对于键值在条件范围内但并不存在的记录，叫做“间隙”。</p><p>InnoDB 也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁。</p><p>对索引项之间的“间隙”加锁，锁定记录的范围（对第一条记录前的间隙或最后一条将记录后的间隙加锁），不包含索引项本身。其他事务不能在锁范围内插入数据，这样就防止了别的事务新增幻影行。</p><p>间隙锁基于非唯一索引，它锁定一段范围内的索引记录。间隙锁基于下面将会提到的<code>Next-Key Locking</code> 算法，请务必牢记：<strong>使用间隙锁锁住的是一个区间，而不仅仅是这个区间中的每一条数据</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table WHERE id BETWEN 1 AND 10 FOR UPDATE;</span><br></pre></td></tr></table></figure><p>即所有在<code>（1，10）</code>区间内的记录行都会被锁住，所有id 为 2、3、4、5、6、7、8、9 的数据行的插入会被阻塞，但是 1 和 10 两条记录行并不会被锁住。</p><p>GAP锁的目的，是为了防止同一事务的两次当前读，出现幻读的情况</p></li><li><p><strong>临键锁(Next-key Locks)</strong>： <strong>临键锁</strong>，是<strong>记录锁与间隙锁的组合</strong>，它的封锁范围，既包含索引记录，又包含索引区间。(临键锁的主要目的，也是为了避免<strong>幻读</strong>(Phantom Read)。如果把事务的隔离级别降级为RC，临键锁则也会失效。)</p><p>Next-Key 可以理解为一种特殊的<strong>间隙锁</strong>，也可以理解为一种特殊的<strong>算法</strong>。通过<strong>临建锁</strong>可以解决幻读的问题。 每个数据行上的非唯一索引列上都会存在一把临键锁，当某个事务持有该数据行的临键锁时，会锁住一段左开右闭区间的数据。需要强调的一点是，<code>InnoDB</code> 中行级锁是基于索引实现的，临键锁只与非唯一索引列有关，在唯一索引列（包括主键列）上不存在临键锁。</p><p>对于行的查询，都是采用该方法，主要目的是解决幻读的问题。</p></li></ul><blockquote><p>select for update有什么含义，会锁表还是锁行还是其他</p></blockquote><p>for update 仅适用于InnoDB，且必须在事务块(BEGIN/COMMIT)中才能生效。在进行事务操作时，通过“for update”语句，MySQL会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞。排他锁包含行锁、表锁。</p><p>InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！ 假设有个表单 products ，里面有id跟name二个栏位，id是主键。</p><ul><li>明确指定主键，并且有此笔资料，row lock</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE id=&apos;3&apos; FOR UPDATE;</span><br><span class="line">SELECT * FROM products WHERE id=&apos;3&apos; and type=1 FOR UPDATE;</span><br></pre></td></tr></table></figure><ul><li>明确指定主键，若查无此笔资料，无lock</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE id=&apos;-1&apos; FOR UPDATE;</span><br></pre></td></tr></table></figure><ul><li>无主键，table lock</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE name=&apos;Mouse&apos; FOR UPDATE;</span><br></pre></td></tr></table></figure><ul><li>主键不明确，table lock</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE id&lt;&gt;&apos;3&apos; FOR UPDATE;</span><br></pre></td></tr></table></figure><ul><li>主键不明确，table lock</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products WHERE id LIKE &apos;3&apos; FOR UPDATE;</span><br></pre></td></tr></table></figure><p><strong>注1</strong>: FOR UPDATE仅适用于InnoDB，且必须在交易区块(BEGIN/COMMIT)中才能生效。 <strong>注2</strong>: 要测试锁定的状况，可以利用MySQL的Command Mode ，开二个视窗来做测试。</p><blockquote><p>MySQL 遇到过死锁问题吗，你是如何解决的？</p></blockquote><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p><strong>死锁产生</strong>：</p><ul><li>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环</li><li>当事务试图以不同的顺序锁定资源时，就可能产生死锁。多个事务同时锁定同一个资源时也可能会产生死锁</li><li>锁的行为和顺序和存储引擎相关。以同样的顺序执行语句，有些存储引擎会产生死锁有些不会——死锁有双重原因：真正的数据冲突；存储引擎的实现方式。</li></ul><p><strong>检测死锁</strong>：数据库系统实现了各种死锁检测和死锁超时的机制。InnoDB存储引擎能检测到死锁的循环依赖并立即返回一个错误。</p><p><strong>死锁恢复</strong>：死锁发生以后，只有部分或完全回滚其中一个事务，才能打破死锁，InnoDB目前处理死锁的方法是，将持有最少行级排他锁的事务进行回滚。所以事务型应用程序在设计时必须考虑如何处理死锁，多数情况下只需要重新执行因死锁回滚的事务即可。</p><p><strong>外部锁的死锁检测</strong>：发生死锁后，InnoDB 一般都能自动检测到，并使一个事务释放锁并回退，另一个事务获得锁，继续完成事务。但在涉及外部锁，或涉及表锁的情况下，InnoDB 并不能完全自动检测到死锁， 这需要通过设置锁等待超时参数 innodb_lock_wait_timeout 来解决</p><p><strong>死锁影响性能</strong>：死锁会影响性能而不是会产生严重错误，因为InnoDB会自动检测死锁状况并回滚其中一个受影响的事务。在高并发系统上，当许多线程等待同一个锁时，死锁检测可能导致速度变慢。 有时当发生死锁时，禁用死锁检测（使用innodb_deadlock_detect配置选项）可能会更有效，这时可以依赖<code>innodb_lock_wait_timeout</code>设置进行事务回滚。</p><p><strong>MyISAM避免死锁</strong>：</p><ul><li>在自动加锁的情况下，MyISAM 总是一次获得 SQL 语句所需要的全部锁，所以 MyISAM 表不会出现死锁。</li></ul><p><strong>InnoDB避免死锁</strong>：</p><ul><li>为了在单个InnoDB表上执行多个并发写入操作时避免死锁，可以在事务开始时通过为预期要修改的每个元祖（行）使用<code>SELECT ... FOR UPDATE</code>语句来获取必要的锁，即使这些行的更改语句是在之后才执行的。</li><li>在事务中，如果要更新记录，应该直接申请足够级别的锁，即排他锁，而不应先申请共享锁、更新时再申请排他锁，因为这时候当用户再申请排他锁时，其他事务可能又已经获得了相同记录的共享锁，从而造成锁冲突，甚至死锁</li><li>如果事务需要修改或锁定多个表，则应在每个事务中以相同的顺序使用加锁语句。 在应用中，如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会</li><li>通过<code>SELECT ... LOCK IN SHARE MODE</code>获取行的读锁后，如果当前事务再需要对该记录进行更新操作，则很有可能造成死锁。</li><li>改变事务隔离级别</li></ul><p>如果出现死锁，可以用 <code>show engine innodb status;</code>命令来确定最后一个死锁产生的原因。返回结果中包括死锁相关事务的详细信息，如引发死锁的 SQL 语句，事务已经获得的锁，正在等待什么锁，以及被回滚的事务等。据此可以分析死锁产生的原因和改进措施。</p><hr><h2 id="八、MySQL调优"><a href="#八、MySQL调优" class="headerlink" title="八、MySQL调优"></a>八、MySQL调优</h2><blockquote><p>日常工作中你是怎么优化SQL的？</p><p>SQL优化的一般步骤是什么，怎么看执行计划（explain），如何理解其中各个字段的含义？</p><p>如何写sql能够有效的使用到复合索引？</p><p>一条sql执行过长的时间，你如何优化，从哪些方面入手？</p><p>什么是最左前缀原则？什么是最左匹配原则？</p></blockquote><h3 id="影响mysql的性能因素"><a href="#影响mysql的性能因素" class="headerlink" title="影响mysql的性能因素"></a>影响mysql的性能因素</h3><ul><li>业务需求对MySQL的影响(合适合度)</li><li>存储定位对MySQL的影响<ul><li>不适合放进MySQL的数据<ul><li>二进制多媒体数据</li><li>流水队列数据</li><li>超大文本数据</li></ul></li><li>需要放进缓存的数据<ul><li>系统各种配置及规则数据</li><li>活跃用户的基本信息数据</li><li>活跃用户的个性化定制信息数据</li><li>准实时的统计信息数据</li><li>其他一些访问频繁但变更较少的数据</li></ul></li></ul></li><li>Schema设计对系统的性能影响<ul><li>尽量减少对数据库访问的请求</li><li>尽量减少无用数据的查询请求</li></ul></li><li>硬件环境对系统性能的影响</li></ul><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><h4 id="MySQL-Query-Optimizer"><a href="#MySQL-Query-Optimizer" class="headerlink" title="MySQL Query Optimizer"></a>MySQL Query Optimizer</h4><ol><li>MySQL 中有专门负责优化 SELECT 语句的优化器模块，主要功能：通过计算分析系统中收集到的统计信息，为客户端请求的 Query 提供他认为最优的执行计划（他认为最优的数据检索方式，但不见得是 DBA 认为是最优的，这部分最耗费时间）</li><li>当客户端向 MySQL 请求一条 Query，命令解析器模块完成请求分类，区别出是 SELECT 并转发给 MySQL Query Optimize r时，MySQL Query Optimizer 首先会对整条 Query 进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对 Query 中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件、结构调整等。然后分析 Query 中的 Hint 信息（如果有），看显示 Hint 信息是否可以完全确定该 Query 的执行计划。如果没有 Hint 或 Hint 信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据 Query 进行写相应的计算分析，然后再得出最后的执行计划。</li></ol><h4 id="MySQL常见瓶颈"><a href="#MySQL常见瓶颈" class="headerlink" title="MySQL常见瓶颈"></a>MySQL常见瓶颈</h4><ul><li>CPU：CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候</li><li>IO：磁盘I/O瓶颈发生在装入数据远大于内存容量的时候</li><li>服务器硬件的性能瓶颈：top，free，iostat 和 vmstat来查看系统的性能状态</li></ul><h4 id="性能下降SQL慢-执行时间长-等待时间长-原因分析"><a href="#性能下降SQL慢-执行时间长-等待时间长-原因分析" class="headerlink" title="性能下降SQL慢 执行时间长 等待时间长 原因分析"></a>性能下降SQL慢 执行时间长 等待时间长 原因分析</h4><ul><li>查询语句写的烂</li><li>索引失效（单值、复合）</li><li>关联查询太多join（设计缺陷或不得已的需求）</li><li>服务器调优及各个参数设置（缓冲、线程数等）</li></ul><h4 id="MySQL常见性能分析手段"><a href="#MySQL常见性能分析手段" class="headerlink" title="MySQL常见性能分析手段"></a>MySQL常见性能分析手段</h4><p>在优化MySQL时，通常需要对数据库进行分析，常见的分析手段有<strong>慢查询日志</strong>，<strong>EXPLAIN 分析查询</strong>，<strong>profiling分析</strong>以及<strong>show命令查询系统状态及系统变量</strong>，通过定位分析性能的瓶颈，才能更好的优化数据库系统的性能。</p><h5 id="性能瓶颈定位"><a href="#性能瓶颈定位" class="headerlink" title="性能瓶颈定位"></a>性能瓶颈定位</h5><p>我们可以通过 show 命令查看 MySQL 状态及变量，找到系统的瓶颈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Mysql&gt; show status ——显示状态信息（扩展show status like ‘XXX’）</span><br><span class="line"></span><br><span class="line">Mysql&gt; show variables ——显示系统变量（扩展show variables like ‘XXX’）</span><br><span class="line"></span><br><span class="line">Mysql&gt; show innodb status ——显示InnoDB存储引擎的状态</span><br><span class="line"></span><br><span class="line">Mysql&gt; show processlist ——查看当前SQL执行，包括执行状态、是否锁表等</span><br><span class="line"></span><br><span class="line">Shell&gt; mysqladmin variables -u username -p password——显示系统变量</span><br><span class="line"></span><br><span class="line">Shell&gt; mysqladmin extended-status -u username -p password——显示状态信息</span><br></pre></td></tr></table></figure><h5 id="Explain-执行计划"><a href="#Explain-执行计划" class="headerlink" title="Explain(执行计划)"></a>Explain(执行计划)</h5><p>是什么：使用 <strong>Explain</strong> 关键字可以模拟优化器执行SQL查询语句，从而知道 MySQL 是如何处理你的 SQL 语句的。分析你的查询语句或是表结构的性能瓶颈</p><p>能干吗：</p><ul><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ul><p>怎么玩：</p><ul><li>Explain + SQL语句</li><li>执行计划包含的信息（如果有分区表的话还会有<strong>partitions</strong>）</li></ul><p><img src="/paper/Mysql知识点总结/1734bff38d5d8333.png" alt="执行计划信息"></p><p>各字段解释</p><ul><li><p><strong>id</strong>（select 查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序）</p><ul><li>id相同，执行顺序从上往下</li><li>id全不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li><li>id部分相同，执行顺序是先按照数字大的先执行，然后数字相同的按照从上往下的顺序执行</li></ul></li><li><p><strong>select_type</strong>（查询类型，用于区别普通查询、联合查询、子查询等复杂查询）</p><ul><li><strong>SIMPLE</strong> ：简单的select查询，查询中不包含子查询或UNION</li><li><strong>PRIMARY</strong>：查询中若包含任何复杂的子部分，最外层查询被标记为PRIMARY</li><li><strong>SUBQUERY</strong>：在select或where列表中包含了子查询</li><li><strong>DERIVED</strong>：在from列表中包含的子查询被标记为DERIVED，MySQL会递归执行这些子查询，把结果放在临时表里</li><li><strong>UNION</strong>：若第二个select出现在UNION之后，则被标记为UNION，若UNION包含在from子句的子查询中，外层select将被标记为DERIVED</li><li><strong>UNION RESULT</strong>：从UNION表获取结果的select</li></ul></li><li><p><strong>table</strong>（显示这一行的数据是关于哪张表的）</p></li><li><p><strong>type</strong>（显示查询使用了那种类型，从最好到最差依次排列    <strong>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</strong> ）</p><ul><li>system：表只有一行记录（等于系统表），是 const 类型的特例，平时不会出现</li><li>const：表示通过索引一次就找到了，const 用于比较 primary key 或 unique 索引，因为只要匹配一行数据，所以很快，如将主键置于 where 列表中，mysql 就能将该查询转换为一个常量</li><li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见于主键或唯一索引扫描</li><li>ref：非唯一性索引扫描，范围匹配某个单独值得所有行。本质上也是一种索引访问，他返回所有匹配某个单独值的行，然而，它可能也会找到多个符合条件的行，多以他应该属于查找和扫描的混合体</li><li>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引，一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询，这种范围扫描索引比全表扫描要好，因为它只需开始于索引的某一点，而结束于另一点，不用扫描全部索引</li><li>index：Full Index Scan，index于ALL区别为index类型只遍历索引树。通常比ALL快，因为索引文件通常比数据文件小。（<strong>也就是说虽然all和index都是读全表，但index是从索引中读取的，而all是从硬盘中读的</strong>）</li><li>ALL：Full Table Scan，将遍历全表找到匹配的行</li></ul><p>tip: 一般来说，得保证查询至少达到range级别，最好到达ref</p></li><li><p><strong>possible_keys</strong>（显示可能应用在这张表中的索引，一个或多个，查询涉及到的字段若存在索引，则该索引将被列出，但不一定被查询实际使用）</p></li><li><p><strong>key</strong></p><ul><li>实际使用的索引，如果为NULL，则没有使用索引</li><li><strong>查询中若使用了覆盖索引，则该索引和查询的 select 字段重叠，仅出现在key列表中</strong></li></ul></li></ul><p><img src="/paper/Mysql知识点总结/1734bff38f6a6955.png" alt="执行计划示例"></p><ul><li><strong>key_len</strong><ul><li>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好</li><li>key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的</li></ul></li><li><strong>ref</strong> （显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值）</li><li><strong>rows</strong> （根据表统计信息及索引选用情况，大致估算找到所需的记录所需要读取的行数）</li><li><strong>Extra</strong>（包含不适合在其他列中显示但十分重要的额外信息）<ol><li>using filesort: 说明mysql会对数据使用一个外部的索引排序，不是按照表内的索引顺序进行读取。mysql中无法利用索引完成的排序操作称为“文件排序”。常见于order by和group by语句中</li><li>Using temporary：使用了临时表保存中间结果，mysql在对查询结果排序时使用临时表。常见于排序order by和分组查询group by。</li><li>using index：表示相应的select操作中使用了覆盖索引，避免访问了表的数据行，效率不错，如果同时出现using where，表明索引被用来执行索引键值的查找；否则索引被用来读取数据而非执行查找操作</li><li>using where：使用了where过滤</li><li>using join buffer：使用了连接缓存</li><li>impossible where：where子句的值总是false，不能用来获取任何元祖</li><li>select tables optimized away：在没有group by子句的情况下，基于索引优化操作或对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化</li><li>distinct：优化distinct操作，在找到第一匹配的元祖后即停止找同样值的动作</li></ol></li></ul><p><strong>case</strong>:</p><p><img src="/paper/Mysql知识点总结/1734bff39882383d.png" alt="示例"></p><ol><li>第一行（执行顺序4）：id列为1，表示是union里的第一个select，select_type列的primary表示该查询为外层查询，table列被标记为，表示查询结果来自一个衍生表，其中derived3中3代表该查询衍生自第三个select查询，即id为3的select。【select d1.name……】</li><li>第二行（执行顺序2）：id为3，是整个查询中第三个select的一部分。因查询包含在from中，所以为derived。【select id,name from t1 where other_column=’’】</li><li>第三行（执行顺序3）：select列表中的子查询select_type为subquery，为整个查询中的第二个select。【select id from t3】</li><li>第四行（执行顺序1）：select_type为union，说明第四个select是union里的第二个select，最先执行【select name,id from t2】</li><li>第五行（执行顺序5）：代表从union的临时表中读取行的阶段，table列的&lt;union1,4&gt;表示用第一个和第四个select的结果进行union操作。【两个结果union操作】</li></ol><h5 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h5><p>MySQL 的慢查询日志是 MySQL 提供的一种日志记录，它用来记录在 MySQL 中响应时间超过阈值的语句，具体指运行时间超过 <code>long_query_time</code> 值的 SQL，则会被记录到慢查询日志中。</p><ul><li><code>long_query_time</code> 的默认值为10，意思是运行10秒以上的语句</li><li>默认情况下，MySQL数据库没有开启慢查询日志，需要手动设置参数开启</li></ul><p><strong>查看开启状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;%slow_query_log%&apos;</span><br></pre></td></tr></table></figure><p><strong>开启慢查询日志</strong></p><ul><li>临时配置：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global slow_query_log=&apos;ON&apos;;</span><br><span class="line">mysql&gt; set global slow_query_log_file=&apos;/var/lib/mysql/hostname-slow.log&apos;;</span><br><span class="line">mysql&gt; set global long_query_time=2;</span><br></pre></td></tr></table></figure><p>​    也可set文件位置，系统会默认给一个缺省文件host_name-slow.log</p><p>​    使用set操作开启慢查询日志只对当前数据库生效，如果MySQL重启则会失效。</p><ul><li><p>永久配置</p><p>修改配置文件my.cnf或my.ini，在[mysqld]一行下面加入两个配置参数</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">slow_query_log = ON</span><br><span class="line">slow_query_log_file = /var/lib/mysql/hostname-slow.log</span><br><span class="line">long_query_time = 3</span><br></pre></td></tr></table></figure><p>注：log-slow-queries 参数为慢查询日志存放的位置，一般这个目录要有 MySQL 的运行帐号的可写权限，一般都将这个目录设置为 MySQL 的数据存放目录；long_query_time=2 中的 2 表示查询超过两秒才记录；在my.cnf或者 my.ini 中添加 log-queries-not-using-indexes 参数，表示记录下没有使用索引的查询。</p><p>可以用 <code>select sleep(4)</code> 验证是否成功开启。</p><p>在生产环境中，如果手工分析日志，查找、分析SQL，还是比较费劲的，所以MySQL提供了日志分析工具<strong>mysqldumpslow</strong>。</p><p>通过 mysqldumpslow –help 查看操作帮助信息</p><ul><li><p>得到返回记录集最多的10个SQL</p><p><code>mysqldumpslow -s r -t 10 /var/lib/mysql/hostname-slow.log</code></p></li><li><p>得到访问次数最多的10个SQL</p><p><code>mysqldumpslow -s c -t 10 /var/lib/mysql/hostname-slow.log</code></p></li><li><p>得到按照时间排序的前10条里面含有左连接的查询语句</p><p><code>mysqldumpslow -s t -t 10 -g &quot;left join&quot; /var/lib/mysql/hostname-slow.log</code></p></li><li><p>也可以和管道配合使用</p><p><code>mysqldumpslow -s r -t 10 /var/lib/mysql/hostname-slow.log | more</code></p></li></ul><p><strong>也可使用 pt-query-digest 分析 RDS MySQL 慢查询日志</strong></p><h5 id="Show-Profile-分析查询"><a href="#Show-Profile-分析查询" class="headerlink" title="Show Profile 分析查询"></a>Show Profile 分析查询</h5><p>通过慢日志查询可以知道哪些 SQL 语句执行效率低下，通过 explain 我们可以得知 SQL 语句的具体执行情况，索引使用等，还可以结合<code>Show Profile</code>命令查看执行状态。</p><ul><li><p>Show Profile 是 MySQL 提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量</p></li><li><p>默认情况下，参数处于关闭状态，并保存最近15次的运行结果</p></li><li><p>分析步骤</p><ol><li><p>是否支持，看看当前的mysql版本是否支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;Show  variables like &apos;profiling&apos;;  --默认是关闭，使用前需要开启</span><br></pre></td></tr></table></figure></li><li><p>开启功能，默认是关闭，使用前需要开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;set profiling=1;</span><br></pre></td></tr></table></figure></li><li><p>运行SQL</p></li><li><p>查看结果</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show profiles; +----------+------------+---------------------------------+ | Query_ID | Duration   | Query                           | +----------+------------+---------------------------------+ |        1 | 0.00385450 | show variables like &quot;profiling&quot; | |        2 | 0.00170050 | show variables like &quot;profiling&quot; | |        3 | 0.00038025 | select * from t_base_user       | +----------+------------+---------------------------------+</span><br></pre></td></tr></table></figure><ol><li>诊断SQL，show profile cpu,block io for query  id(上一步前面的问题SQL数字号码)</li><li>日常开发需要注意的结论<ul><li>converting HEAP to MyISAM 查询结果太大，内存都不够用了往磁盘上搬了。</li><li>create tmp table 创建临时表，这个要注意</li><li>Copying to tmp table on disk   把内存临时表复制到磁盘</li><li>locked</li></ul></li></ol></li></ul><blockquote><p>查询中哪些情况不会使用索引？</p></blockquote><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h4><ol><li>全值匹配我最爱</li><li>最佳左前缀法则，比如建立了一个联合索引(a,b,c)，那么其实我们可利用的索引就有(a), (a,b), (a,b,c)</li><li>不在索引列上做任何操作（计算、函数、(自动or手动)类型转换），会导致索引失效而转向全表扫描</li><li>存储引擎不能使用索引中范围条件右边的列</li><li>尽量使用覆盖索引(只访问索引的查询(索引列和查询列一致))，减少select</li><li>is null ,is not null 也无法使用索引</li><li>like “xxxx%” 是可以用到索引的，like “%xxxx” 则不行(like “%xxx%” 同理)。like以通配符开头(‘%abc…’)索引失效会变成全表扫描的操作，</li><li>字符串不加单引号索引失效</li><li>少用or，用它来连接时会索引失效</li><li>&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN 可用到索引，&lt;&gt;，not in ，!= 则不行，会导致全表扫描</li></ol><p><strong>一般性建议</strong></p><ul><li>对于单键索引，尽量选择针对当前query过滤性更好的索引</li><li>在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</li><li>在选择组合索引的时候，尽量选择可以能够包含当前query中的where字句中更多字段的索引</li><li>尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的</li><li>少用Hint强制索引</li></ul><h4 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h4><p><strong>永远小标驱动大表（小的数据集驱动大的数据集）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">slect * from A where id in (select id from B)`等价于</span><br><span class="line">#等价于</span><br><span class="line">select id from B</span><br><span class="line">select * from A where A.id=B.id</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>当 B 表的数据集必须小于 A 表的数据集时，用 in 优于 exists</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from A where exists (select 1 from B where B.id=A.id)</span><br><span class="line">#等价于</span><br><span class="line">select * from A</span><br><span class="line">select * from B where B.id = A.id`</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>当 A 表的数据集小于B表的数据集时，用 exists优于用 in</p><p>注意：A表与B表的ID字段应建立索引。</p><p><strong>order by关键字优化</strong></p><ul><li>order by子句，尽量使用 Index 方式排序，避免使用 FileSort 方式排序</li><li>MySQL 支持两种方式的排序，FileSort 和 Index，Index效率高，它指 MySQL 扫描索引本身完成排序，FileSort 效率较低；</li><li>ORDER BY 满足两种情况，会使用Index方式排序；①ORDER BY语句使用索引最左前列 ②使用where子句与ORDER BY子句条件列组合满足索引最左前列</li><li>尽可能在索引列上完成排序操作，遵照索引建的最佳最前缀</li><li>如果不在索引列上，filesort 有两种算法，mysql就要启动双路排序和单路排序<ul><li>双路排序：MySQL 4.1之前是使用双路排序,字面意思就是两次扫描磁盘，最终得到数据</li><li>单路排序：从磁盘读取查询需要的所有列，按照order by 列在 buffer对它们进行排序，然后扫描排序后的列表进行输出，效率高于双路排序</li></ul></li><li>优化策略<ul><li>增大sort_buffer_size参数的设置</li><li>增大max_lencth_for_sort_data参数的设置</li></ul></li></ul><p><strong>GROUP BY关键字优化</strong></p><ul><li>group by实质是先排序后进行分组，遵照索引建的最佳左前缀</li><li>当无法使用索引列，增大 <code>max_length_for_sort_data</code> 参数的设置，增大<code>sort_buffer_size</code>参数的设置</li><li>where高于having，能写在where限定的条件就不要去having限定了</li></ul><h4 id="数据类型优化"><a href="#数据类型优化" class="headerlink" title="数据类型优化"></a>数据类型优化</h4><p>MySQL 支持的数据类型非常多，选择正确的数据类型对于获取高性能至关重要。不管存储哪种类型的数据，下面几个简单的原则都有助于做出更好的选择。</p><ul><li><p>更小的通常更好：一般情况下，应该尽量使用可以正确存储数据的最小数据类型。</p><p>简单就好：简单的数据类型通常需要更少的CPU周期。例如，整数比字符操作代价更低，因为字符集和校对规则（排序规则）使字符比较比整型比较复杂。</p></li><li><p>尽量避免NULL：通常情况下最好指定列为NOT NULL</p></li></ul><hr><h2 id="九、分区、分表、分库"><a href="#九、分区、分表、分库" class="headerlink" title="九、分区、分表、分库"></a>九、分区、分表、分库</h2><h3 id="MySQL分区"><a href="#MySQL分区" class="headerlink" title="MySQL分区"></a>MySQL分区</h3><p>一般情况下我们创建的表对应一组存储文件，使用<code>MyISAM</code>存储引擎时是一个<code>.MYI</code>和<code>.MYD</code>文件，使用<code>Innodb</code>存储引擎时是一个<code>.ibd</code>和<code>.frm</code>（表结构）文件。</p><p>当数据量较大时（一般千万条记录级别以上），MySQL的性能就会开始下降，这时我们就需要将数据分散到多组存储文件，保证其单个文件的执行效率</p><p><strong>能干嘛</strong></p><ul><li>逻辑数据分割</li><li>提高单一的写和读应用速度</li><li>提高分区范围读查询的速度</li><li>分割数据能够有多个不同的物理文件路径</li><li>高效的保存历史数据</li></ul><p><strong>怎么玩</strong></p><p>首先查看当前数据库是否支持分区</p><ul><li><p>MySQL5.6以及之前版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;%partition%&apos;;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure></li><li><p>MySQL5.6：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show plugins;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure></li></ul><p><strong>分区类型及操作</strong></p><ul><li><p><strong>RANGE分区</strong>：基于属于一个给定连续区间的列值，把多行分配给分区。mysql将会根据指定的拆分策略，,把数据放在不同的表文件上。相当于在文件上,被拆成了小块.但是,对外给客户的感觉还是一张表，透明的。</p><p>按照 range 来分，就是每个库一段连续的数据，这个一般是按比如<strong>时间范围</strong>来的，比如交易表啊，销售表啊等，可以根据年月来存放数据。可能会产生热点问题，大量的流量都打在最新的数据上了。</p><p>range 来分，好处在于说，扩容的时候很简单。</p></li><li><p><strong>LIST分区</strong>：类似于按RANGE分区，每个分区必须明确定义。它们的主要区别在于，LIST分区中每个分区的定义和选择是基于某列的值从属于一个值列表集中的一个值，而RANGE分区是从属于一个连续区间值的集合。</p></li><li><p><strong>HASH分区</strong>：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL 中有效的、产生非负整数值的任何表达式。</p><p>hash 分发，好处在于说，可以平均分配每个库的数据量和请求压力；坏处在于说扩容起来比较麻烦，会有一个数据迁移的过程，之前的数据需要重新计算 hash 值重新分配到不同的库或表</p></li><li><p><strong>KEY分区</strong>：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值。</p></li></ul><p><strong>看上去分区表很帅气，为什么大部分互联网还是更多的选择自己分库分表来水平扩展咧？</strong></p><ul><li>分区表，分区键设计不太灵活，如果不走分区键，很容易出现全表锁</li><li>一旦数据并发量上来，如果在分区表实施关联，就是一个灾难</li><li>自己分库分表，自己掌控业务场景与访问模式，可控。分区表，研发写了一个sql，都不确定mysql是怎么玩的，不太可控</li></ul><blockquote><p>随着业务的发展，业务越来越复杂，应用的模块越来越多，总的数据量很大，高并发读写操作均超过单个数据库服务器的处理能力怎么办？</p></blockquote><p>这个时候就出现了<strong>数据分片</strong>，数据分片指按照某个维度将存放在单一数据库中的数据分散地存放至多个数据库或表中。数据分片的有效手段就是对关系型数据库进行分库和分表。</p><p>区别于分区的是，分区一般都是放在单机里的，用的比较多的是时间范围分区，方便归档。只不过分库分表需要代码实现，分区则是mysql内部实现。分库分表和分区并不冲突，可以结合使用。</p><blockquote><p>说说分库与分表的设计</p></blockquote><h3 id="MySQL分表"><a href="#MySQL分表" class="headerlink" title="MySQL分表"></a>MySQL分表</h3><p>分表有两种分割方式，一种垂直拆分，另一种水平拆分。</p><ul><li><p><strong>垂直拆分</strong></p><p>垂直分表，通常是按照业务功能的使用频次，把主要的、热门的字段放在一起做为主要表。然后把不常用的，按照各自的业务属性进行聚集，拆分到不同的次要表中；主要表和次要表的关系一般都是一对一的。</p></li><li><p><strong>水平拆分(数据分片)</strong></p><p>单表的容量不超过500W，否则建议水平拆分。是把一个表复制成同样表结构的不同表，然后把数据按照一定的规则划分，分别存储到这些表中，从而保证单表的容量不会太大，提升性能；当然这些结构一样的表，可以放在一个或多个数据库中。</p><p>水平分割的几种方法：</p><ul><li>使用MD5哈希，做法是对UID进行md5加密，然后取前几位（我们这里取前两位），然后就可以将不同的UID哈希到不同的用户表（user_xx）中了。</li><li>还可根据时间放入不同的表，比如：article_201601，article_201602。</li><li>按热度拆分，高点击率的词条生成各自的一张表，低热度的词条都放在一张大表里，待低热度的词条达到一定的贴数后，再把低热度的表单独拆分成一张表。</li><li>根据ID的值放入对应的表，第一个表user_0000，第二个100万的用户数据放在第二 个表user_0001中，随用户增加，直接添加用户表就行了。</li></ul></li></ul><p><img src="/paper/Mysql知识点总结/1734bff39ffffdd1.png" alt="水平/垂直分表"></p><h3 id="MySQL分库"><a href="#MySQL分库" class="headerlink" title="MySQL分库"></a>MySQL分库</h3><blockquote><p>为什么要分库?</p></blockquote><p>数据库集群环境后都是多台 slave，基本满足了读取操作;  但是写入或者说大数据、频繁的写入操作对master性能影响就比较大，这个时候，单库并不能解决大规模并发写入的问题，所以就会考虑分库。</p><blockquote><p>分库是什么？</p></blockquote><p>一个库里表太多了，导致了海量数据，系统性能下降，把原本存储于一个库的表拆分存储到多个库上， 通常是将表按照功能模块、关系密切程度划分出来，部署到不同库上。</p><p>优点：</p><ul><li>减少增量数据写入时的锁对查询的影响</li><li>由于单表数量下降，常见的查询操作由于减少了需要扫描的记录，使得单表单次查询所需的检索行数变少，减少了磁盘IO，时延变短</li></ul><p>但是它无法解决单表数据量太大的问题</p><p><strong>分库分表后的难题</strong></p><p>分布式事务的问题，数据的完整性和一致性问题。</p><p>数据操作维度问题：用户、交易、订单各个不同的维度，用户查询维度、产品数据分析维度的不同对比分析角度。 跨库联合查询的问题，可能需要两次查询 跨节点的count、order by、group by以及聚合函数问题，可能需要分别在各个节点上得到结果后在应用程序端进行合并 额外的数据管理负担，如：访问数据表的导航定位 额外的数据运算压力，如：需要在多个节点执行，然后再合并计算程序编码开发难度提升，没有太好的框架解决，更多依赖业务看如何分，如何合，是个难题。</p><blockquote><p>配主从，正经公司的话，也不会让 Javaer 去搞的，但还是要知道</p></blockquote><h2 id="十、主从复制"><a href="#十、主从复制" class="headerlink" title="十、主从复制"></a>十、主从复制</h2><h3 id="复制的基本原理"><a href="#复制的基本原理" class="headerlink" title="复制的基本原理"></a>复制的基本原理</h3><ul><li><p>slave 会从 master 读取 binlog 来进行数据同步</p></li><li><p>三个步骤</p><ol><li>master将改变记录到二进制日志（binary log）。这些记录过程叫做二进制日志事件，binary log events；</li><li>salve 将 master 的 binary log events 拷贝到它的中继日志（relay log）;</li><li>slave 重做中继日志中的事件，将改变应用到自己的数据库中。MySQL 复制是异步且是串行化的。</li></ol><p><img src="/paper/Mysql知识点总结/1734bff3c7c7b231.png" alt="主从复制"></p></li></ul><h3 id="复制的基本原则"><a href="#复制的基本原则" class="headerlink" title="复制的基本原则"></a>复制的基本原则</h3><ul><li>每个 slave只有一个 master</li><li>每个 salve只能有一个唯一的服务器 ID</li><li>每个master可以有多个salve</li></ul><h3 id="复制的最大问题"><a href="#复制的最大问题" class="headerlink" title="复制的最大问题"></a>复制的最大问题</h3><ul><li>延时</li></ul><hr><h2 id="十一、其他问题"><a href="#十一、其他问题" class="headerlink" title="十一、其他问题"></a>十一、其他问题</h2><h3 id="说一说三个范式"><a href="#说一说三个范式" class="headerlink" title="说一说三个范式"></a>说一说三个范式</h3><ul><li>第一范式（1NF）：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。</li><li>第二范式（2NF）：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。</li><li>第三范式（3NF）：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如 果存在”A → B → C”的决定关系，则C传递函数依赖于A。因此，满足第三范式的数据库表应该不存在如下依赖关系： 关键字段 → 非关键字段 x → 非关键字段y</li></ul><h3 id="百万级别或以上的数据如何删除"><a href="#百万级别或以上的数据如何删除" class="headerlink" title="百万级别或以上的数据如何删除"></a>百万级别或以上的数据如何删除</h3><p>关于索引：由于索引需要额外的维护成本，因为索引文件是单独存在的文件,所以当我们对数据的增加,修改,删除,都会产生额外的对索引文件的操作,这些操作需要消耗额外的IO,会降低增/改/删的执行效率。所以，在我们删除数据库百万级别数据的时候，查询MySQL官方手册得知删除数据的速度和创建的索引数量是成正比的。</p><ol><li>所以我们想要删除百万数据的时候可以先删除索引（此时大概耗时三分多钟）</li><li>然后删除其中无用数据（此过程需要不到两分钟）</li><li>删除完成后重新创建索引(此时数据较少了)创建索引也非常快，约十分钟左右。</li><li>与之前的直接删除绝对是要快速很多，更别说万一删除中断,一切删除会回滚。那更是坑了。</li></ol><h2 id="参考与感谢："><a href="#参考与感谢：" class="headerlink" title="参考与感谢："></a>参考与感谢：</h2><p><strong><a href="https://zhuanlan.zhihu.com/p/29150809" target="_blank" rel="noopener">EnjoyMoving</a></strong></p><p><strong><a href="https://juejin.im/post/6844904061523886088#heading-105" target="_blank" rel="noopener">程序员内点事</a></strong></p><p><strong><a href="https://blog.csdn.net/yin767833376/article/details/81511377" target="_blank" rel="noopener">菜鸟笔记</a></strong></p><blockquote><p><strong>特别声明：版权归原作者所有如有侵权请立即与我联系，我将及时处理</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;作者：&lt;a href=&quot;https://juejin.im/post/6850037271233331208&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;贾不假&lt;/a&gt;&lt;/st
      
    
    </summary>
    
      <category term="收藏" scheme="https://sangedon.cn/categories/%E6%94%B6%E8%97%8F/"/>
    
    
      <category term="数据库" scheme="https://sangedon.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mysql" scheme="https://sangedon.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java动态追踪技术探究</title>
    <link href="https://sangedon.cn/paper/Java%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%A9%B6/"/>
    <id>https://sangedon.cn/paper/Java动态追踪技术探究/</id>
    <published>2020-10-21T13:45:30.000Z</published>
    <updated>2020-10-22T13:27:27.377Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p><strong>作者：<a href="https://tech.meituan.com/2019/02/28/java-dynamic-trace.html" target="_blank" rel="noopener">美团｜高扬</a></strong></p></blockquote><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>在遥远的希艾斯星球爪哇国塞沃城中，两名年轻的程序员正在为一件事情苦恼，程序出问题了，一时看不出问题出在哪里，于是有了以下对话：</p><p>“Debug一下吧。”</p><p>“线上机器，没开Debug端口。”</p><p>“看日志，看看请求值和返回值分别是什么？”</p><p>“那段代码没打印日志。”</p><p>“改代码，加日志，重新发布一次。”</p><p>“怀疑是线程池的问题，重启会破坏现场。”</p><p>长达几十秒的沉默之后：“据说，排查问题的最高境界，就是只通过Review代码来发现问题。”</p><p>比几十秒长几十倍的沉默之后：“我轮询了那段代码一十七遍之后，终于得出一个结论。”</p><p>“结论是？”</p><p>“我还没到达只通过Review代码就能发现问题的至高境界。”</p><h2 id="从JSP说起"><a href="#从JSP说起" class="headerlink" title="从JSP说起"></a>从JSP说起</h2><p>对于大多数Java程序员来说，早期的时候，都会接触到一个叫做JSP（Java Server Pages）的技术。虽然这种技术，在前后端代码分离、前后端逻辑分离、前后端组织架构分离的今天来看，已经过时了，但是其中还是有一些有意思的东西，值得拿出来说一说。</p><p>当时刚刚处于Java入门时期的我们，大多数精力似乎都放在了JSP的页面展示效果上了：</p><p>“这个表格显示的行数不对”</p><p>“原来是for循环写的有问题，改一下，刷新页面再试一遍”</p><p>“嗯，好了，表格显示没问题了，但是，登录人的姓名没取到啊，是不是Sesstion获取有问题？”</p><p>“有可能，我再改一下，一会儿再刷新试试”</p><p>……</p><p>在一遍一遍修改代码刷新浏览器页面重试的时候，我们自己也许并没有注意到一件很酷的事情：我们修改完代码，居然只是简单地刷新一遍浏览器页面，修改就生效了，整个过程并没有重启JVM。按照我们的常识，Java程序一般都是在启动时加载类文件，如果都像JSP这样修改完代码，不用重启就生效的话，那文章开头的问题就可以解决了啊：Java文件中加一段日志打印的代码，不重启就生效，既不破坏现场，又可以定位问题。忍不住试一试：修改、编译、替换class文件。额，不行，新改的代码并没有生效。那为什么偏偏JSP可以呢？让我们先来看看JSP的运行原理。</p><p>当我们打开浏览器，请求访问一个JSP文件的时候，整个过程是这样的:</p><p><img src="/paper/Java动态追踪技术探究/7fceed5036a40f4bd22ccf86629069c0118151.jpg" alt="JSP文件处理过程"></p><p>JSP文件修改过后，之所以能及时生效，是因为Web容器（Tomcat）会检查请求的JSP文件是否被更改过。如果发生过更改，那么就将JSP文件重新解析翻译成一个新的Sevlet类，并加载到JVM中。之后的请求，都会由这个新的Servet来处理。这里有个问题，根据Java的类加载机制，在同一个ClassLoader中，类是不允许重复的。为了绕开这个限制，Web容器每次都会创建一个新的ClassLoader实例，来加载新编译的Servlet类。之后的请求都会由这个新的Servlet来处理，这样就实现了新旧JSP的切换。</p><p>HTTP服务是无状态的，所以JSP的场景基本上都是一次性消费，这种通过创建新的ClassLoader来“替换”class的做法行得通，但是对于其他应用，比如Spring框架，即便这样做了，对象多数是单例，对于内存中已经创建好的对象，我们无法通过这种创建新的ClassLoader实例的方法来修改对象行为。</p><p>我就是想不重启应用加个日志打印，就这么难吗？</p><h2 id="Java对象行为"><a href="#Java对象行为" class="headerlink" title="Java对象行为"></a>Java对象行为</h2><p>既然JSP的办法行不通，那我们来看看还有没有其他的办法。仔细想想，我们会发现，文章开头的问题本质上是动态改变内存中已存在对象的行为的问题。所以，我们得先弄清楚JVM中和对象行为有关的地方在哪里，有没有更改的可能性。</p><p>我们都知道，对象使用两种东西来描述事物：行为和属性。举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.println(str);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面Person类中age和name是属性，speak是行为。对象是类的事例，每个对象的属性都属于对象本身，但是每个对象的行为却是公共的。举个例子，比如我们现在基于Person类创建了两个对象，personA和personB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person personA = <span class="keyword">new</span> Person(<span class="number">43</span>, <span class="string">"lixunhuan"</span>);</span><br><span class="line"></span><br><span class="line">personA.speak(<span class="string">"我是李寻欢"</span>);</span><br><span class="line"></span><br><span class="line">Person personB = <span class="keyword">new</span> Person(<span class="number">23</span>, <span class="string">"afei"</span>);</span><br><span class="line"></span><br><span class="line">personB.speak(<span class="string">"我是阿飞"</span>);</span><br></pre></td></tr></table></figure><p>personA和personB有各自的姓名和年龄，但是有共同的行为：speak。想象一下，如果我们是Java语言的设计者，我们会怎么存储对象的行为和属性呢？</p><p>“很简单，属性跟着对象走，每个对象都存一份。行为是公共的东西，抽离出来，单独放到一个地方。”</p><p>“咦？抽离出公共的部分，跟代码复用好像啊。”</p><p>“大道至简，很多东西本来都是殊途同归。”</p><p>也就是说，第一步我们首先得找到存储对象行为的这个公共的地方。一番搜索之后，我们发现这样一段描述：</p><blockquote><p>Method area is created on virtual machine startup, shared among all Java virtual machine threads and it is logically part of heap area. It stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors.</p></blockquote><p>Java的对象行为（方法、函数）是存储在方法区的。</p><p>“方法区中的数据从哪来？”</p><p>“方法区中的数据是类加载时从class文件中提取出来的。”</p><p>“class文件从哪来？”</p><p>“从Java或者其他符合JVM规范的源代码中编译而来。”</p><p>“源代码从哪来？”</p><p>“废话，当然是手写！”</p><p>“倒着推，手写没问题，编译没问题，至于加载……有没有办法加载一个已经加载过的类呢？如果有的话，我们就能修改字节码中目标方法所在的区域，然后重新加载这个类，这样方法区中的对象行为（方法）就被改变了，而且不改变对象的属性，也不影响已经存在对象的状态，那么就可以搞定这个问题了。可是，这岂不是违背了JVM的类加载原理？毕竟我们不想改变ClassLoader。”</p><p>“少年，可以去看看<code>java.lang.instrument.Instrumentation</code>。”</p><h2 id="java-lang-instrument-Instrumentation"><a href="#java-lang-instrument-Instrumentation" class="headerlink" title="java.lang.instrument.Instrumentation"></a>java.lang.instrument.Instrumentation</h2><p>看完文档之后，我们发现这么两个接口：redefineClasses和retransformClasses。一个是重新定义class，一个是修改class。这两个大同小异，看reDefineClasses的说明：</p><blockquote><p>This method is used to replace the definition of a class without reference to the existing class file bytes, as one might do when recompiling from source for fix-and-continue debugging. Where the existing class file bytes are to be transformed (for example in bytecode instrumentation) retransformClasses should be used.</p></blockquote><p>都是替换已经存在的class文件，redefineClasses是自己提供字节码文件替换掉已存在的class文件，retransformClasses是在已存在的字节码文件上修改后再替换之。</p><p>当然，运行时直接替换类很不安全。比如新的class文件引用了一个不存在的类，或者把某个类的一个field给删除了等等，这些情况都会引发异常。所以如文档中所言，instrument存在诸多的限制：</p><blockquote><p>The redefinition may change method bodies, the constant pool and attributes. The redefinition must not add, remove or rename fields or methods, change the signatures of methods, or change inheritance. These restrictions maybe be lifted in future versions. The class file bytes are not checked, verified and installed until after the transformations have been applied, if the resultant bytes are in error this method will throw an exception.</p></blockquote><p>我们能做的基本上也就是简单修改方法内的一些行为，这对于我们开头的问题，打印一段日志来说，已经足够了。当然，我们除了通过reTransform来打印日志，还能做很多其他非常有用的事情，这个下文会进行介绍。</p><p>那怎么得到我们需要的class文件呢？一个最简单的方法，是把修改后的Java文件重新编译一遍得到class文件，然后调用redefineClasses替换。但是对于没有（或者拿不到，或者不方便修改）源码的文件我们应该怎么办呢？其实对于JVM来说，不管是Java也好，Scala也好，任何一种符合JVM规范的语言的源代码，都可以编译成class文件。JVM的操作对象是class文件，而不是源码。所以，从这种意义上来讲，我们可以说“JVM跟语言无关”。既然如此，不管有没有源码，其实我们只需要修改class文件就行了。</p><h2 id="直接操作字节码"><a href="#直接操作字节码" class="headerlink" title="直接操作字节码"></a>直接操作字节码</h2><p>Java是软件开发人员能读懂的语言，class字节码是JVM能读懂的语言，class字节码最终会被JVM解释成机器能读懂的语言。无论哪种语言，都是人创造的。所以，理论上（实际上也确实如此）人能读懂上述任何一种语言，既然能读懂，自然能修改。只要我们愿意，我们完全可以跳过Java编译器，直接写字节码文件，只不过这并不符合时代的发展罢了，毕竟高级语言设计之始就是为我们人类所服务，其开发效率也比机器语言高很多。</p><p>对于人类来说，字节码文件的可读性远远没有Java代码高。尽管如此，还是有一些杰出的程序员们创造出了可以用来直接编辑字节码的框架，提供接口可以让我们方便地操作字节码文件，进行注入修改类的方法，动态创造一个新的类等等操作。其中最著名的框架应该就是ASM了，cglib、Spring等框架中对于字节码的操作就建立在ASM之上。</p><p>我们都知道，Spring的AOP是基于动态代理实现的，Spring会在运行时动态创建代理类，代理类中引用被代理类，在被代理的方法执行前后进行一些神秘的操作。那么，Spring是怎么在运行时创建代理类的呢？动态代理的美妙之处，就在于我们不必手动为每个需要被代理的类写代理类代码，Spring在运行时会根据需要动态地创造出一个类，这里创造的过程并非通过字符串写Java文件，然后编译成class文件，然后加载。Spring会直接“创造”一个class文件，然后加载，创造class文件的工具，就是ASM了。</p><p>到这里，我们知道了用ASM框架直接操作class文件，在类中加一段打印日志的代码，然后调用retransformClasses就可以了。</p><h2 id="BTrace"><a href="#BTrace" class="headerlink" title="BTrace"></a>BTrace</h2><p>截止到目前，我们都是停留在理论描述的层面。那么如何进行实现呢？先来看几个问题：</p><ol><li>在我们的工程中，谁来做这个寻找字节码，修改字节码，然后reTransform的动作呢？我们并非先知，不可能知道未来有没有可能遇到文章开头的这种问题。考虑到性价比，我们也不可能在每个工程中都开发一段专门做这些修改字节码、重新加载字节码的代码。</li><li>如果JVM不在本地，在远程呢？</li><li>如果连ASM都不会用呢？能不能更通用一些，更“傻瓜”一些。</li></ol><p>幸运的是，因为有BTrace的存在，我们不必自己写一套这样的工具了。什么是BTrace呢？<a href="https://github.com/btraceio/btrace" target="_blank" rel="noopener">BTrace</a>已经开源，项目描述极其简短：</p><blockquote><p>A safe, dynamic tracing tool for the Java platform.</p></blockquote><p>BTrace是基于Java语言的一个安全的、可提供动态追踪服务的工具。BTrace基于ASM、Java Attach Api、Instruments开发，为用户提供了很多注解。依靠这些注解，我们可以编写BTrace脚本（简单的Java代码）达到我们想要的效果，而不必深陷于ASM对字节码的操作中不可自拔。</p><p>看BTrace官方提供的一个简单例子：拦截所有java.io包中所有类中以read开头的方法，打印类名、方法名和参数名。当程序IO负载比较高的时候，就可以从输出的信息中看到是哪些类所引起，是不是很方便？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.btrace.samples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.btrace.annotations.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.btrace.AnyType;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.sun.btrace.BTraceUtils.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This sample demonstrates regular expression</span></span><br><span class="line"><span class="comment"> * probe matching and getting input arguments</span></span><br><span class="line"><span class="comment"> * as an array - so that any overload variant</span></span><br><span class="line"><span class="comment"> * can be traced in "one place". This example</span></span><br><span class="line"><span class="comment"> * traces any "readXX" method on any class in</span></span><br><span class="line"><span class="comment"> * java.io package. Probed class, method and arg</span></span><br><span class="line"><span class="comment"> * array is printed in the action.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@BTrace</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgArray</span> </span>&#123;</span><br><span class="line">    <span class="meta">@OnMethod</span>(</span><br><span class="line">        clazz=<span class="string">"/java\\.io\\..*/"</span>,</span><br><span class="line">        method=<span class="string">"/read.*/"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">anyRead</span><span class="params">(@ProbeClassName String pcn, @ProbeMethodName String pmn, AnyType[] args)</span> </span>&#123;</span><br><span class="line">        println(pcn);</span><br><span class="line">        println(pmn);</span><br><span class="line">        printArray(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看另一个例子：每隔2秒打印截止到当前创建过的线程数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.btrace.samples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.btrace.annotations.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.sun.btrace.BTraceUtils.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.btrace.annotations.Export;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This sample creates a jvmstat counter and</span></span><br><span class="line"><span class="comment"> * increments it everytime Thread.start() is</span></span><br><span class="line"><span class="comment"> * called. This thread count may be accessed</span></span><br><span class="line"><span class="comment"> * from outside the process. The <span class="doctag">@Export</span> annotated</span></span><br><span class="line"><span class="comment"> * fields are mapped to jvmstat counters. The counter</span></span><br><span class="line"><span class="comment"> * name is "btrace." + &lt;className&gt; + "." + &lt;fieldName&gt;</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="meta">@BTrace</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCounter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a jvmstat counter using @Export</span></span><br><span class="line">    <span class="meta">@Export</span> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMethod</span>(</span><br><span class="line">        clazz=<span class="string">"java.lang.Thread"</span>,</span><br><span class="line">        method=<span class="string">"start"</span></span><br><span class="line">    ) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onnewThread</span><span class="params">(@Self Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// updating counter is easy. Just assign to</span></span><br><span class="line">        <span class="comment">// the static field!</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnTimer</span>(<span class="number">2000</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ontimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// we can access counter as "count" as well</span></span><br><span class="line">        <span class="comment">// as from jvmstat counter directly.</span></span><br><span class="line">        println(count);</span><br><span class="line">        <span class="comment">// or equivalently ...</span></span><br><span class="line">        println(Counters.perfLong(<span class="string">"btrace.com.sun.btrace.samples.ThreadCounter.count"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了上面的用法是不是有所启发？忍不住冒出来许多想法。比如查看HashMap什么时候会触发rehash，以及此时容器中有多少元素等等。</p><p>有了BTrace，文章开头的问题可以得到完美的解决。至于BTrace具体有哪些功能，脚本怎么写，这些Git上BTrace工程中有大量的说明和举例，网上介绍BTrace用法的文章更是恒河沙数，这里就不再赘述了。</p><p>我们明白了原理，又有好用的工具支持，剩下的就是发挥我们的创造力了，只需在合适的场景下合理地进行使用即可。</p><p>既然BTrace能解决上面我们提到的所有问题，那么BTrace的架构是怎样的呢？</p><p>BTrace主要有下面几个模块：</p><ol><li>BTrace脚本：利用BTrace定义的注解，我们可以很方便地根据需要进行脚本的开发。</li><li>Compiler：将BTrace脚本编译成BTrace class文件。</li><li>Client：将class文件发送到Agent。</li><li>Agent：基于Java的Attach Api，Agent可以动态附着到一个运行的JVM上，然后开启一个BTrace Server，接收client发过来的BTrace脚本；解析脚本，然后根据脚本中的规则找到要修改的类；修改字节码后，调用Java Instrument的reTransform接口，完成对对象行为的修改并使之生效。</li></ol><p>整个BTrace的架构大致如下：</p><p><img src="/paper/Java动态追踪技术探究/25f19ea854450ce3964d20ae778f621a178594.jpg" alt="BTrace工作流程"></p><p>BTrace最终借Instruments实现class的替换。如上文所说，出于安全考虑，Instruments在使用上存在诸多的限制，BTrace也不例外。BTrace对JVM来说是“只读的”，因此BTrace脚本的限制如下：</p><ol><li>不允许创建对象</li><li>不允许创建数组</li><li>不允许抛异常</li><li>不允许catch异常</li><li>不允许随意调用其他对象或者类的方法，只允许调用com.sun.btrace.BTraceUtils中提供的静态方法（一些数据处理和信息输出工具）</li><li>不允许改变类的属性</li><li>不允许有成员变量和方法，只允许存在<strong>static public void</strong>方法</li><li>不允许有内部类、嵌套类</li><li>不允许有同步方法和同步块</li><li>不允许有循环</li><li>不允许随意继承其他类（当然，java.lang.Object除外）</li><li>不允许实现接口</li><li>不允许使用assert</li><li>不允许使用Class对象</li></ol><p>如此多的限制，其实可以理解。BTrace要做的是，虽然修改了字节码，但是除了输出需要的信息外，对整个程序的正常运行并没有影响。</p><h2 id="Arthas"><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h2><p>BTrace脚本在使用上有一定的学习成本，如果能把一些常用的功能封装起来，对外直接提供简单的命令即可操作的话，那就再好不过了。阿里的工程师们早已想到这一点，就在去年（2018年9月份），阿里巴巴开源了自己的Java诊断工具——<a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">Arthas</a>。Arthas提供简单的命令行操作，功能强大。究其背后的技术原理，和本文中提到的大致无二。Arthas的文档很全面，想详细了解的话可以戳<a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">这里</a>。</p><p>本文旨在说明Java动态追踪技术的来龙去脉，掌握技术背后的原理之后，只要愿意，各位读者也可以开发出自己的“冰封王座”出来。</p><h2 id="尾声：三生万物"><a href="#尾声：三生万物" class="headerlink" title="尾声：三生万物"></a>尾声：三生万物</h2><p>现在，让我们试着站在更高的地方“俯瞰”这些问题。</p><p>Java的Instruments给运行时的动态追踪留下了希望，Attach API则给运行时动态追踪提供了“出入口”，ASM则大大方便了“人类”操作Java字节码的操作。</p><p>基于Instruments和Attach API前辈们创造出了诸如JProfiler、Jvisualvm、BTrace、Arthas这样的工具。以ASM为基础发展出了cglib、动态代理，继而是应用广泛的Spring AOP。</p><p>Java是静态语言，运行时不允许改变数据结构。然而，Java 5引入Instruments，Java 6引入Attach API之后，事情开始变得不一样了。虽然存在诸多限制，然而，在前辈们的努力下，仅仅是利用预留的近似于“只读”的这一点点狭小的空间，仍然创造出了各种大放异彩的技术，极大地提高了软件开发人员定位问题的效率。</p><p>计算机应该是人类有史以来最伟大的发明之一，从电磁感应磁生电，到高低电压模拟0和1的比特，再到二进制表示出几种基本类型，再到基本类型表示出无穷的对象，最后无穷的对象组合交互模拟现实生活乃至整个宇宙。</p><p>两千五百年前，《道德经》有言：“道生一，一生二，二生三，三生万物。”</p><p>两千五百年后，计算机的发展过程也大抵如此吧。</p><h2 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h2><ul><li>高扬，2017年加入美团打车，负责美团打车结算系统的开发。</li></ul><blockquote><p><strong>特别声明：版权归原作者所有如有侵权请立即与我联系，我将及时处理</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;作者：&lt;a href=&quot;https://tech.meituan.com/2019/02/28/java-dynamic-trace.html&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="收藏" scheme="https://sangedon.cn/categories/%E6%94%B6%E8%97%8F/"/>
    
    
      <category term="Java" scheme="https://sangedon.cn/tags/Java/"/>
    
      <category term="动态追踪" scheme="https://sangedon.cn/tags/%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA/"/>
    
  </entry>
  
  <entry>
    <title>Mac下K8S环境搭建</title>
    <link href="https://sangedon.cn/paper/Mac%E4%B8%8BK8S%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://sangedon.cn/paper/Mac下K8S环境搭建/</id>
    <published>2020-06-23T01:50:12.000Z</published>
    <updated>2020-10-21T14:15:11.105Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="搭建K8S环境"><a href="#搭建K8S环境" class="headerlink" title="搭建K8S环境"></a>搭建K8S环境</h2><p>参考文档：<a href="https://github.com/AliyunContainerService/k8s-for-docker-desktop" target="_blank" rel="noopener">https://github.com/AliyunContainerService/k8s-for-docker-desktop</a></p><ol><li><h6 id="docker-已安装，版本为"><a href="#docker-已安装，版本为" class="headerlink" title="docker 已安装，版本为"></a>docker 已安装，版本为</h6><p><img src="/paper/Mac下K8S环境搭建/image-20200810214022444.png" alt="image-20200810214022444"></p></li><li><h6 id="下载和-Kubernetes-版本匹配的k8s相关依赖镜像资源，配置好docker-的阿里云或者中科大的镜像加速"><a href="#下载和-Kubernetes-版本匹配的k8s相关依赖镜像资源，配置好docker-的阿里云或者中科大的镜像加速" class="headerlink" title="下载和 Kubernetes 版本匹配的k8s相关依赖镜像资源，配置好docker 的阿里云或者中科大的镜像加速"></a>下载和 Kubernetes 版本匹配的k8s相关依赖镜像资源，配置好docker 的阿里云或者中科大的镜像加速</h6></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 下载命令</span><br><span class="line">git clone git@github.com:AliyunContainerService/k8s-for-docker-desktop.git -b v1.16.5</span><br></pre></td></tr></table></figure><ol start="3"><li><h6 id="进入到下载的-k8s-for-docker-desktop-目录，执行如下命令"><a href="#进入到下载的-k8s-for-docker-desktop-目录，执行如下命令" class="headerlink" title="进入到下载的 k8s-for-docker-desktop 目录，执行如下命令"></a>进入到下载的 k8s-for-docker-desktop 目录，执行如下命令</h6></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./load_images.sh</span><br></pre></td></tr></table></figure><ol start="4"><li><h6 id="勾选如下，重启即可"><a href="#勾选如下，重启即可" class="headerlink" title="勾选如下，重启即可"></a>勾选如下，重启即可</h6><p><img src="/paper/Mac下K8S环境搭建/image-20200810215529829.png" alt="image-20200810215529829"></p></li></ol><ol start="5"><li><h6 id="部署-Kubernetes-dashboard（执行了第二条）"><a href="#部署-Kubernetes-dashboard（执行了第二条）" class="headerlink" title="部署 Kubernetes dashboard（执行了第二条）"></a>部署 Kubernetes dashboard（执行了第二条）</h6></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc5/aio/deploy/recommended.yaml</span><br><span class="line"><span class="meta">#</span> 或</span><br><span class="line">kubectl create -f kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><ol start="6"><li>检查 kubernetes-dashboard 应用状态</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -n kubernetes-dashboard</span><br></pre></td></tr></table></figure><ol start="7"><li>开启 API Server 访问代理</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl proxy</span><br></pre></td></tr></table></figure><ol start="8"><li>进入k8s仪表盘</li></ol><p>链接：<a href="http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login" target="_blank" rel="noopener">http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login</a></p><ol start="9"><li>配置控制台访问令牌</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 获取登陆 token</span><br><span class="line">TOKEN=$(kubectl -n kube-system describe secret default| awk '$1=="token:"&#123;print $2&#125;')</span><br><span class="line">kubectl config set-credentials docker-for-desktop --token="$&#123;TOKEN&#125;"</span><br><span class="line">echo $TOKEN</span><br></pre></td></tr></table></figure><ul><li>token</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User "docker-for-desktop" set.</span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6Ilp3bUthZkNlZzh3bWlsNDJoTkMxVS1nbm1RSU9TM1VPbXhDcURleG9WRnMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLWtmeDI3Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIzMGM4MWU0OS1lY2QxLTQ1NjktOGY1Mi02OWZiNTMyOWNmYTgiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGVmYXVsdCJ9.uasjTbEU1YEnsYJZ48SK6RBZ9f-SNw9UWimAPe4VQ-2YBExruye04FFREPKXIQw6TJCQ83Vh35kNNXQgYVjEhPMFbgG1oASJZ1fskEul8lBVD2jh41Ul7xrIs4DhADAGpov8nHib7OHN7pkEh8h3UicRdOlYD6pYw2hFvxmHy_ZZwZ8WFXlOeKxh-VT9PYx_LMsNHcZzySO7sQMq7N3jQN7eI8ZFIhoXkA0PaSIb4L0FPYqY0OpwKth0KB6E0181CWUdJVlcICpATL8KPR8HobbGn6uTF5r6gLSX58af1bxGeK4JvKf2sypMcoOdr1s-AYJ8ur7-3E98XWoqsW7UZQ</span><br></pre></td></tr></table></figure><ul><li>安装 ingress失败解决方案</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 报错如下</span><br><span class="line">The connection to the server raw.githubusercontent.com was refused - did you specify the right host or port?</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 解决如下</span><br><span class="line">sudo vi /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加如下配置即可解决</span><br><span class="line">151.101.76.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure><ul><li>安装kubesphere-minimal，参考：<a href="https://kubesphere.com.cn/docs/zh-CN/installation/prerequisites/" target="_blank" rel="noopener">https://kubesphere.com.cn/docs/zh-CN/installation/prerequisites/</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubesphere/ks-installer/master/kubesphere-minimal.yaml</span><br></pre></td></tr></table></figure><ul><li><p>安装helm</p><p>下载：<a href="https://github.com/helm/helm/releases" target="_blank" rel="noopener">https://github.com/helm/helm/releases</a></p><p>版本：2.16.2</p><p>解压下载的文件后将可执行文件helm添加到path</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mv helm /usr/local/bin/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 验证安装</span><br><span class="line">helm version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 输出</span><br><span class="line">Client: &amp;version.Version&#123;SemVer:"v2.16.2", GitCommit:"bbdfe5e7803a12bbdf97e94cd847859890cf4050", GitTreeState:"clean"&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化 helm 并安装 Tiller</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.16.2 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;搭建K8S环境&quot;&gt;&lt;a href=&quot;#搭建K8S环境&quot; class=&quot;headerlink&quot; title=&quot;搭建K8S环境&quot;&gt;&lt;/a&gt;搭建K8S环境&lt;/h2&gt;&lt;p&gt;参考文档：&lt;a href=&quot;https://github.com
      
    
    </summary>
    
      <category term="环境搭建" scheme="https://sangedon.cn/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="docker" scheme="https://sangedon.cn/tags/docker/"/>
    
      <category term="Mac" scheme="https://sangedon.cn/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装virturebox及vagrant虚拟机环境</title>
    <link href="https://sangedon.cn/paper/Mac%E4%B8%8B%E5%AE%89%E8%A3%85virturebox%E5%8F%8Avagrant%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83/"/>
    <id>https://sangedon.cn/paper/Mac下安装virturebox及vagrant虚拟机环境/</id>
    <published>2020-06-22T06:32:15.000Z</published>
    <updated>2020-10-21T14:15:18.641Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="安装virturebox"><a href="#安装virturebox" class="headerlink" title="安装virturebox"></a>安装virturebox</h2><p>下载：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads</a></p><p>版本：6.1.12</p><p>安装步骤：双击下一步即可</p><h2 id="安装vagrant"><a href="#安装vagrant" class="headerlink" title="安装vagrant"></a>安装vagrant</h2><p>下载：<a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">https://www.vagrantup.com/downloads.html</a></p><p>版本：2.2.9</p><p>安装步骤：双击下一步即可</p><ul><li>虚拟机Box下载地址</li></ul><blockquote><p>官方虚拟机box下载地址：<a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">https://app.vagrantup.com/boxes/search</a></p><p>仓库虚拟机box下载地址：<a href="http://www.vagrantbox.es/" target="_blank" rel="noopener">http://www.vagrantbox.es/</a></p></blockquote><h2 id="配置vagrant"><a href="#配置vagrant" class="headerlink" title="配置vagrant"></a>配置vagrant</h2><p>查看vagrant安装版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 输入</span><br><span class="line">vagrant -v</span><br><span class="line"><span class="meta">#</span> 输出</span><br><span class="line">Vagrant 2.2.9</span><br></pre></td></tr></table></figure><ul><li>检查已有的虚拟机列表vagrant box list，提示还没有任何虚拟机</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dongliangqiong@dongliaongdeMBP sangedon % vagrant box list</span><br><span class="line">There are no installed boxes! Use `vagrant box add` to add some.</span><br></pre></td></tr></table></figure><ul><li>将官网box下载下来的 <code>CentOS-7-x86_64-Vagrant-1902_01.VirtualBox.box</code>放入 <code>/Users/dongliangqiong/Documents/sangedon/devtools/software/vagrant</code>目录，后执行如下操作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add centos7 /Users/dongliangqiong/Documents/sangedon/devtools/software/vagrant/CentOS-7-x86_64-Vagrant-1902_01.VirtualBox.box</span><br></pre></td></tr></table></figure><ul><li>执行<code>vagrant init centos7</code>，即可在当前目录生成此虚拟机的配置文件Vagrantfile</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dongliangqiong@dongliaongdeMBP sangedon % vagrant init centos/7</span><br><span class="line">A `Vagrantfile` has been placed in this directory. You are now</span><br><span class="line">ready to `vagrant up` your first virtual environment! Please read</span><br><span class="line">the comments in the Vagrantfile as well as documentation on</span><br><span class="line">`vagrantup.com` for more information on using Vagrant.</span><br></pre></td></tr></table></figure><ul><li><p>执行命令<code>vagrant up</code>，启动虚拟机（参考：<a href="http://www.voidcn.com/article/p-zmehqqii-bdx.html）" target="_blank" rel="noopener">http://www.voidcn.com/article/p-zmehqqii-bdx.html）</a></p></li><li><p>链接虚拟机</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure><ul><li>设置root用户登陆</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vagrant登陆进去之后跳转root账户</span><br><span class="line">sudo -s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置root账户账号</span><br><span class="line">passwd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 修改 /etc/ssh/sshd_config 文件，下面两项改为yes</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重启服务</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><blockquote><p>虚拟机创建成功，可通过 <code>ssh root@ip</code> 命令连接</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装virturebox&quot;&gt;&lt;a href=&quot;#安装virturebox&quot; class=&quot;headerlink&quot; title=&quot;安装virturebox&quot;&gt;&lt;/a&gt;安装virturebox&lt;/h2&gt;&lt;p&gt;下载：&lt;a href=&quot;
      
    
    </summary>
    
      <category term="环境搭建" scheme="https://sangedon.cn/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Mac" scheme="https://sangedon.cn/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac 电脑基础开发环境搭建</title>
    <link href="https://sangedon.cn/paper/Mac-%E7%94%B5%E8%84%91%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://sangedon.cn/paper/Mac-电脑基础开发环境搭建/</id>
    <published>2020-06-12T05:19:17.000Z</published>
    <updated>2020-11-14T09:19:59.392Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>官网下载： <a href="https://www.git-scm.com/download/" target="_blank" rel="noopener">https://www.git-scm.com/download/</a></p><p>版本：<a href="https://sourceforge.net/projects/git-osx-installer/files/git-2.27.0-intel-universal-mavericks.dmg/download?use_mirror=autoselect" target="_blank" rel="noopener">2.27.0</a></p><p>安装：下载后双击 -&gt; 下一步即可</p><p>配置 git 账号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "sangedon"</span><br><span class="line">git config --global user.email "sange.dong@outlook.com"</span><br></pre></td></tr></table></figure><h2 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h2><p>1 、检查.ssh文件夹是否存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br></pre></td></tr></table></figure><p>2、如果不存在新建.ssh文件平</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.ssh</span><br></pre></td></tr></table></figure><p>3、生成KEY在命令行中输入，<a href="mailto:sange.dong@outlook.com" target="_blank" rel="noopener">sange.dong@outlook.com</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -C "sange.dong@outlook.com"</span><br></pre></td></tr></table></figure><p>系统提示输入文件保存位置等信息，连续按三次回车即可，生成的SSH key文件的保存路径会在终端中给出：id_rsa      id_rsa.pub</p><p>4、查看公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><h2 id="安装-JDK1-8"><a href="#安装-JDK1-8" class="headerlink" title="安装 JDK1.8"></a>安装 JDK1.8</h2><p>下载Mac版jdk网址：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p><p>oracle下载登陆账号：<a href="mailto:2696671285@qq.com" target="_blank" rel="noopener">2696671285@qq.com</a> / Oracle123</p><p>下载的版本：jdk-8u261-macosx-x64.dmg（1.8.0_261-b12）</p><p>安装： 双击一路向下即可</p><p>安装目录：/Library/Java/JavaVirtualMachines</p><h2 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h2><p>官网下载：<a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a></p><p>版本：3.6.3</p><p>解压（安装）目录：/Users/dongliangqiong/Documents/sangedon/devtools/software</p><ul><li>添加环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建.bash_profile文件</span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 导出变量</span><br><span class="line">export MAVEN_HOME=/Users/dongliangqiong/Documents/sangedon/devtools/software/apache-maven-3.6.3</span><br><span class="line">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 使生效</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>修改本地仓库路径：</p><p>修改文件：/Users/dongliangqiong/Documents/sangedon/devtools/software/apache-maven-3.6.3/conf/settings.xml </p><p>修改内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/Users/dongliangqiong/Documents/sangedon/devtools/software/maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="安装Node相关"><a href="#安装Node相关" class="headerlink" title="安装Node相关"></a>安装Node相关</h2><ul><li><p>安装NodeJS</p><p>官网下载：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><p>版本： Latest LTS Version: <strong>12.18.3</strong> (includes npm 6.14.6)</p><p>下载文件：node-v12.18.3.pkg</p><p>安装步骤：双击 -&gt; 下一步 即可</p><p>成功截图：</p><p><img src="/paper/Mac-电脑基础开发环境搭建/image-20200808111650459.png" alt="image-20200808111650459"></p></li></ul><ul><li><p>添加 淘宝npm镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>安装cnpm 代替 npm使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br></pre></td></tr></table></figure></li><li><p>安装 yarn</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- -L https://yarnpkg.com/install.sh | bash</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装git&quot;&gt;&lt;a href=&quot;#安装git&quot; class=&quot;headerlink&quot; title=&quot;安装git&quot;&gt;&lt;/a&gt;安装git&lt;/h2&gt;&lt;p&gt;官网下载： &lt;a href=&quot;https://www.git-scm.com/d
      
    
    </summary>
    
      <category term="环境搭建" scheme="https://sangedon.cn/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Mac" scheme="https://sangedon.cn/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Java实现SSL双向认证</title>
    <link href="https://sangedon.cn/paper/Java%E5%AE%9E%E7%8E%B0SSL%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/"/>
    <id>https://sangedon.cn/paper/Java实现SSL双向认证/</id>
    <published>2020-04-13T10:51:07.000Z</published>
    <updated>2020-10-21T14:16:04.859Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>通常客户端连接服务器时会需要校验服务器是否<code>真实、正确</code>，如浏览器输入 <code>https://baidu.com</code>，这种单向确认服务器是否可靠的认证方式为<strong><code>单向认证</code></strong>，实际场景中，我们还经常会需要<strong>同时</strong>验证<strong>服务器</strong>和<strong>客户端</strong>连接的双方是否均为安全、可靠，即服务端为每个用户颁发一个<strong><code>唯一的、不公开</code></strong>的数字证书，客户端通过数字证书来访问服务器，此时，客户端和服务器的交互就是在通信协议上附加SSL协议，确保了 <strong>1.</strong> 服务器和客户端均为安全可靠，互相认可，<strong>2.</strong> 通信内容是加密的，网络嗅探工具无法获取明文数据，这种认证方式即为<strong><code>双向认证</code></strong></p><ul><li>下面将通过<strong><code>JSSE</code></strong>（Java Security Socket Extension）来模拟<code>Server</code> 和 <code>Client</code>的双向认证</li></ul><p>注：<code>JSSE</code>是Sun为了解决在Internet上的安全通讯而推出的解决方案。它实现了SSL和TSL（传输层安全）协议。在<code>JSSE</code>中包含了数据加密，服务器验证，消息完整性和客户端验证等技术。通过使用<code>JSSE</code>，开发人员可以在客户端和服务器之间通过TCP/IP协议安全地传输数据。</p><h3 id="证书准备"><a href="#证书准备" class="headerlink" title="证书准备"></a>证书准备</h3><p>为了实现双向认证，Server 和 Client 端均需要如下两个信息文件（具体如下所列），在此使用<code>Java</code>自带的<code>keytool</code>命令生成证书文件</p><ul><li>KeyStore：服务器端（客户端）的私钥</li><li>Trust KeyStore：保存服务器端（客户端）信任的授权证书</li></ul><p><strong>1.</strong> 生成服务器端私钥并导入到服务端KeyStore文件中，命令过程中需要填写一些内容，根据需求设置即可，如下图。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias serverkey -keystore kserver.keystore</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 需设置内容</span><br><span class="line"><span class="meta">#</span> keystore密码：123456</span><br><span class="line"><span class="meta">#</span> 名字和姓氏：sangedon</span><br><span class="line"><span class="meta">#</span> 组织单位名称：none</span><br><span class="line"><span class="meta">#</span> 组织名称：none</span><br><span class="line"><span class="meta">#</span> 城市或区域名称：BJ</span><br><span class="line"><span class="meta">#</span> 州或省份名称：BJ</span><br><span class="line"><span class="meta">#</span> 国家代码：CN</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong>serverkey私钥的密码，不填写和keystore的密码保持一致。这里千万注意，直接回车就行，不用修改密码。否则在后面的程序中无法直接应用这个私钥，会报错。</p></blockquote><p><img src="/paper/Java实现SSL双向认证/image-20201013185615629.png" alt="生成服务端私钥"></p><ul><li>生成的<code>kserver.keystore</code>是提供给服务端使用，其中保存了服务端的私钥</li></ul><p><strong>2.</strong> 根据私钥，导出服务端证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -export -alias serverkey -keystore kserver.keystore -file server.crt</span><br></pre></td></tr></table></figure><p><img src="/paper/Java实现SSL双向认证/image-20201013185805978.png" alt="导出证书"></p><ul><li><code>server.crt</code>就是服务端的证书</li></ul><p><strong>3.</strong> 将服务端证书，导入客户端Trust keyStore中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -import -alias serverkey -file server.crt -keystore tclient.keystore</span><br></pre></td></tr></table></figure><p><img src="/paper/Java实现SSL双向认证/image-20201013185925690.png" alt="客户端受信任证书列表保存服务端证书"></p><ul><li><code>tclient.keystore</code>为客户端保存的受信任的证书</li></ul><blockquote><p>使用上述同样的方法，生成客户端私钥，客户端证书，并导入到服务端受信任证书列表，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> keytool -genkey -alias clientkey -keystore kclient.keystore</span><br><span class="line"><span class="meta">&gt;</span> keytool -export -alias clientkey -keystore kclient.keystore -file client.crt</span><br><span class="line"><span class="meta">&gt;</span> keytool -import -alias clientkey -file client.crt -keystore tserver.keystore</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><ul><li>生成如下证书文件</li></ul><p><img src="/paper/Java实现SSL双向认证/image-20201013190722635.png" alt="生成的证书"></p><h3 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h3><ul><li>客户端代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.KeyManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocket;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManagerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SSL 连接客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">"127.0.0.1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLIENT_KEY_STORE_PASSWORD = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLIENT_TRUST_KEY_STORE_PASSWORD = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KS_FILE = <span class="string">"client/kclient.keystore"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TKS_FILE = <span class="string">"client/tclient.keystore"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SSLSocket sslSocket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Client client = <span class="keyword">new</span> Client();</span><br><span class="line">        client.init();</span><br><span class="line">        client.process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sslSocket == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"SSL 连接尚未建立"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = sslSocket.getInputStream();</span><br><span class="line">            OutputStream os = sslSocket.getOutputStream();</span><br><span class="line">            BufferedInputStream bi = <span class="keyword">new</span> BufferedInputStream(is);</span><br><span class="line">            BufferedOutputStream bo = <span class="keyword">new</span> BufferedOutputStream(os);</span><br><span class="line">            bo.write(<span class="string">"Client message"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            bo.flush();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            bi.read(bytes);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes, StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">            sslSocket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建SSL对话上下文，导入客户端秘钥keystore，导入客户端信任的keystore（服务端证书），初始化SSLSocket连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SSLContext sslContext = SSLContext.getInstance(<span class="string">"SSL"</span>);</span><br><span class="line">            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class="string">"SunX509"</span>);</span><br><span class="line">            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(<span class="string">"SunX509"</span>);</span><br><span class="line">            KeyStore ks = KeyStore.getInstance(<span class="string">"JKS"</span>);</span><br><span class="line">            KeyStore tks = KeyStore.getInstance(<span class="string">"JKS"</span>);</span><br><span class="line">            ks.load(<span class="keyword">new</span> FileInputStream(KS_FILE), CLIENT_KEY_STORE_PASSWORD.toCharArray());</span><br><span class="line">            tks.load(<span class="keyword">new</span> FileInputStream(TKS_FILE), CLIENT_TRUST_KEY_STORE_PASSWORD.toCharArray());</span><br><span class="line">            keyManagerFactory.init(ks, CLIENT_KEY_STORE_PASSWORD.toCharArray());</span><br><span class="line">            trustManagerFactory.init(tks);</span><br><span class="line">            sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), <span class="keyword">null</span>);</span><br><span class="line">            sslSocket = (SSLSocket) sslContext.getSocketFactory().createSocket(HOST, PORT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>服务端代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.KeyManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLServerSocket;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManagerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SSL 连接服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_KEY_STORE_PASSWORD = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_TRUST_KEY_STORE_PASSWORD = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KS_FILE = <span class="string">"server/kserver.keystore"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TKS_FILE = <span class="string">"server/tserver.keystore"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SSLServerSocket sslServerSocket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Server server = <span class="keyword">new</span> Server();</span><br><span class="line">        server.init();</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待客户端连接，进行通信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sslServerSocket == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"SSL 连接尚未建立"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket socket = sslServerSocket.accept();</span><br><span class="line">            InputStream is = socket.getInputStream();</span><br><span class="line">            OutputStream os = socket.getOutputStream();</span><br><span class="line">            BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(is);</span><br><span class="line">            BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(os);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            bis.read(bytes);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes, StandardCharsets.UTF_8));</span><br><span class="line">            bos.write(<span class="string">"Server accept"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            bos.flush();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建SSL对话上下文，导入服务端秘钥keystore，导入服务端信任的keystore（客户端证书），初始化SSLServerSocket连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SSLContext sslContext = SSLContext.getInstance(<span class="string">"SSL"</span>);</span><br><span class="line">            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class="string">"SunX509"</span>);</span><br><span class="line">            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(<span class="string">"SunX509"</span>);</span><br><span class="line">            KeyStore ks = KeyStore.getInstance(<span class="string">"JKS"</span>);</span><br><span class="line">            KeyStore tks = KeyStore.getInstance(<span class="string">"JKS"</span>);</span><br><span class="line">            ks.load(<span class="keyword">new</span> FileInputStream(KS_FILE), SERVER_KEY_STORE_PASSWORD.toCharArray());</span><br><span class="line">            tks.load(<span class="keyword">new</span> FileInputStream(TKS_FILE), SERVER_TRUST_KEY_STORE_PASSWORD.toCharArray());</span><br><span class="line">            keyManagerFactory.init(ks, SERVER_KEY_STORE_PASSWORD.toCharArray());</span><br><span class="line">            trustManagerFactory.init(tks);</span><br><span class="line">            sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), <span class="keyword">null</span>);</span><br><span class="line">            sslServerSocket = (SSLServerSocket) sslContext.getServerSocketFactory().createServerSocket(PORT);</span><br><span class="line">            sslServerSocket.setNeedClientAuth(<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分别启动服务端和客户端即可验证</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;通常客户端连接服务器时会需要校验服务器是否&lt;code&gt;真实、正确&lt;/code&gt;，如浏览器输入 &lt;code&gt;https://baidu.com&lt;/code&gt;，这种单向确认服务器是否可靠的认证方式为&lt;strong&gt;&lt;code&gt;单向认证&lt;/co
      
    
    </summary>
    
      <category term="Java" scheme="https://sangedon.cn/categories/Java/"/>
    
    
      <category term="加密技术" scheme="https://sangedon.cn/tags/%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Docker中安装Redis</title>
    <link href="https://sangedon.cn/paper/Docker%E4%B8%AD%E5%AE%89%E8%A3%85Redis/"/>
    <id>https://sangedon.cn/paper/Docker中安装Redis/</id>
    <published>2019-09-20T07:51:27.000Z</published>
    <updated>2020-10-21T14:16:14.366Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="单机安装"><a href="#单机安装" class="headerlink" title="单机安装"></a>单机安装</h2><ul><li>下载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><ul><li>安装运行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name redis -p 6379:6379 -v /opt/docker/redis/data:/data -v /opt/docker/redis/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><ul><li>设置配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在/opt/docker/redis/conf/目录下生成配置文件即可，后续可补充配置，重启即可</span><br><span class="line">touch redis.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;单机安装&quot;&gt;&lt;a href=&quot;#单机安装&quot; class=&quot;headerlink&quot; title=&quot;单机安装&quot;&gt;&lt;/a&gt;单机安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;下载&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
      <category term="环境搭建" scheme="https://sangedon.cn/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="docker" scheme="https://sangedon.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker中安装MySQL</title>
    <link href="https://sangedon.cn/paper/Docker%E4%B8%AD%E5%AE%89%E8%A3%85MySQL/"/>
    <id>https://sangedon.cn/paper/Docker中安装MySQL/</id>
    <published>2019-09-20T07:05:52.000Z</published>
    <updated>2020-10-21T14:16:19.225Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="单实例安装"><a href="#单实例安装" class="headerlink" title="单实例安装"></a>单实例安装</h2><ul><li>下载镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -v /opt/docker/mysql/log:/var/log/mysql -v /opt/docker/mysql/data:/var/lib/mysql -v /opt/docker/mysql/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br></pre></td></tr></table></figure><p>参数说明：</p><ol><li>-p 3306:3306 将容器的3306端口映射到主机的3306端口</li><li>-v 同步主机目录和容器目录</li><li>-e 初始化mysql的root用户密码</li></ol><ul><li>配置文件设置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在/opt/docker/mysql/conf下执行</span><br><span class="line">vi my.cnf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 文件中将下列配置拷贝进去即可</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">init_connect='SET collation_connection=utf8_unicode_ci'</span><br><span class="line">init_connect='SET NAMES utf8'</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><ul><li>重启</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure><blockquote><p>MYSQL 服务启动成功！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;单实例安装&quot;&gt;&lt;a href=&quot;#单实例安装&quot; class=&quot;headerlink&quot; title=&quot;单实例安装&quot;&gt;&lt;/a&gt;单实例安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;下载镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="环境搭建" scheme="https://sangedon.cn/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="docker" scheme="https://sangedon.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7上Nginx的安装及基本配置</title>
    <link href="https://sangedon.cn/paper/CentOS%207%E4%B8%8Anginx%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <id>https://sangedon.cn/paper/CentOS 7上nginx安装及相关配置/</id>
    <published>2019-06-23T01:50:12.000Z</published>
    <updated>2020-09-23T05:14:55.465Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><em>Nginx</em> (engine x) 是一个高性能的<code>HTTP</code>和<code>反向代理</code>服务，也是一个<code>IMAP/POP3/SMTP</code>服务。由俄罗斯人伊戈尔·赛索耶夫为Rambler.ru站点用<strong>C语言</strong>开发的，第一个公开版本0.1.0发布于2004年10月4日，2011年成立同名公司，以提供支持。其源代码以BSD-like 许可证的形式发布，作为一款轻量级 Web/反向代理 服务器以及电子邮件（IMAP/POP3）代理服务器，其主要特点是每条连接占有内存少，并发能力强，常用于Web服务器、反向代理、负载均衡以及HTTP缓存等场景。</p><h2 id="编译安装-推荐"><a href="#编译安装-推荐" class="headerlink" title="编译安装(推荐)"></a>编译安装(推荐)</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h4><blockquote><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><h4 id="PCRE-pcre-devel"><a href="#PCRE-pcre-devel" class="headerlink" title="PCRE pcre-devel"></a>PCRE pcre-devel</h4><blockquote><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库，nginx也需要此库。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><h4 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h4><blockquote><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 CentOS上安装 zlib 库。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><h4 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h4><blockquote><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 CentOS上 安装 OpenSSL 库。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><ul><li>安装环境综合命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf automake zlib zlib-devel openssl openssl-devel pcre-devel</span><br></pre></td></tr></table></figure><h3 id="Nginx下载及安装"><a href="#Nginx下载及安装" class="headerlink" title="Nginx下载及安装"></a>Nginx下载及安装</h3><ul><li><a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">官方下载地址</a></li><li>命令行下载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://nginx.org/download/nginx-1.14.1.tar.gz</span><br></pre></td></tr></table></figure><p>成功结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[sange@centos-7 java]$ wget -c https://nginx.org/download/nginx-1.14.1.tar.gz</span><br><span class="line">--2019-04-15 22:58:27--  https://nginx.org/download/nginx-1.14.1.tar.gz</span><br><span class="line">Resolving nginx.org (nginx.org)... 95.211.80.227, 62.210.92.35, 2001:1af8:4060:a004:21::e3</span><br><span class="line">Connecting to nginx.org (nginx.org)|95.211.80.227|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 1014040 (990K) [application/octet-stream]</span><br><span class="line">Saving to: ‘nginx-1.14.1.tar.gz’</span><br><span class="line"></span><br><span class="line"><span class="meta">100%</span>[======================================&gt;] 1,014,040    210KB/s   in 4.7s   </span><br><span class="line"></span><br><span class="line">2019-04-15 22:58:33 (210 KB/s) - ‘nginx-1.14.1.tar.gz’ saved [1014040/1014040]</span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.14.1.tar.gz</span><br></pre></td></tr></table></figure><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x. 6 sange sange   4096 Apr 15 23:16 auto   # </span><br><span class="line">-rw-r--r--. 1 sange sange 287441 Nov  6 21:52 CHANGES</span><br><span class="line">-rw-r--r--. 1 sange sange 438114 Nov  6 21:52 CHANGES.ru</span><br><span class="line">drwxr-xr-x. 2 sange sange    168 Apr 15 23:16 conf</span><br><span class="line">-rwxr-xr-x. 1 sange sange   2502 Nov  6 21:52 configure</span><br><span class="line">drwxr-xr-x. 4 sange sange     72 Apr 15 23:16 contrib</span><br><span class="line">drwxr-xr-x. 2 sange sange     40 Apr 15 23:16 html</span><br><span class="line">-rw-r--r--. 1 sange sange   1397 Nov  6 21:52 LICENSE</span><br><span class="line">drwxr-xr-x. 2 sange sange     21 Apr 15 23:16 man</span><br><span class="line">-rw-r--r--. 1 sange sange     49 Nov  6 21:52 README</span><br><span class="line">drwxr-xr-x. 9 sange sange     91 Apr 15 23:16 src</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>使用默认配置即可，也可自定义配置</p><ol><li>使用默认配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装完成后nginx.conf等相关文件及目录即在 /usr/local/nginx 目录下</span><br><span class="line">[sange@centos-7 nginx-1.14.1]$ ./configure --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>自定义配置（不推荐）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./configure </span><br><span class="line"><span class="meta">#</span> 以下为’./configure‘ 命令的参数，’=‘后为各项参数的默认值</span><br><span class="line">--prefix=/usr/local/nginx  # Nginx安装路径。</span><br><span class="line">--conf-path=/usr/local/nginx/conf/nginx.conf  # 在没有给定-c选项下默认的nginx.conf的路径</span><br><span class="line">--sbin-path=/usr/local/nginx/sbin  # Nginx可执行文件安装路径。</span><br><span class="line">--pid-path=/usr/local/nginx/conf/nginx.pid  # 在nginx.conf中没有指定pid指令的情况下，默认的nginx.pid的路径</span><br><span class="line">--lock-path=/var/lock/nginx.lock  # nginx.lock文件的路径</span><br><span class="line">--error-log-path=/var/log/nginx/error.log  # 在nginx.conf中没有指定error_log指令的情况下，默认的错误日志的路径</span><br><span class="line">--http-log-path=/var/log/nginx/access.log  # 在nginx.conf中没有指定access_log指令的情况下，默认的访问日志的路径</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 其他参数含义，一般默认即可</span><br><span class="line">--with-*  # 表明启用某些功能模块</span><br><span class="line">--without-*  # 表明禁用某些功能模块</span><br></pre></td></tr></table></figure><h3 id="编译及安装"><a href="#编译及安装" class="headerlink" title="编译及安装"></a>编译及安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sange@centos-7 nginx-1.14.1]$ sudo make &amp; make install</span><br></pre></td></tr></table></figure><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[sange@centos-7 nginx-1.14.1]$ whereis nginx  # 查找安装目录</span><br><span class="line">nginx: /usr/local/nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 进入安装目录下的二进制执行文件目录进行相关操作</span><br><span class="line">[sange@centos-7 nginx-1.14.1]$ cd /usr/local/nginx/sbin/  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 以下为nginx操作命令</span><br><span class="line">./nginx  # 启动 nginx</span><br><span class="line">./nginx -s stop  # 此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程</span><br><span class="line">./nginx -s quit  # 此方式停止步骤是待nginx进程处理任务完毕进行停止</span><br><span class="line">./nginx -s reload  # 当修改 nginx.conf 后重新加载配置文件令其生效</span><br></pre></td></tr></table></figure><h3 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h3><p>即在<code>rc.local</code>增加启动代码就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.local</span><br></pre></td></tr></table></figure><p>增加一行 <code>/usr/local/nginx/sbin/nginx</code>，具体如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span> THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> It is highly advisable to create own systemd services or udev rules</span><br><span class="line"><span class="meta">#</span> to run scripts during boot instead of using this file.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> In contrast to previous versions due to parallel execution during boot</span><br><span class="line"><span class="meta">#</span> this script will NOT be run after all other services.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Please note that you must run 'chmod +x /etc/rc.d/rc.local' to ensure</span><br><span class="line"><span class="meta">#</span> that this script will be executed during boot.</span><br><span class="line"></span><br><span class="line">touch /var/lock/subsys/local</span><br><span class="line">/usr/local/nginx/sbin/nginx  # 增加的一行</span><br></pre></td></tr></table></figure><p>设置<code>rc.local</code>非root用户执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 rc.local</span><br></pre></td></tr></table></figure><h2 id="YUM安装"><a href="#YUM安装" class="headerlink" title="YUM安装"></a>YUM安装</h2><p>在CentOS下，yum源不提供nginx的安装，可以通过切换yum源的方法获取安装yum源，下例为官网的yum源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><p>通过<code>whereis nginx</code>查看nginx默认安装路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/nginx/  # Nginx默认配置路径，nginx.conf在此</span><br><span class="line">/var/run/nginx.pid  # PID目录</span><br><span class="line">/var/log/nginx/error.log  # 错误日志</span><br><span class="line">/var/log/nginx/access.log  # 访问日志</span><br><span class="line">/usr/share/nginx/html  # 默认站点目录</span><br></pre></td></tr></table></figure><p>测试命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx -t </span><br><span class="line"><span class="meta">#</span> 测试成功结果</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure><p>开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure><p>操作命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx  # 启动服务</span><br><span class="line">sudo systemctl restart nginx  # 停止服务</span><br><span class="line">sudo systemctl reload nginx  # 重新加载配置</span><br></pre></td></tr></table></figure><p>yum卸载nginx命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove -y nginx</span><br></pre></td></tr></table></figure><h2 id="防火墙问题"><a href="#防火墙问题" class="headerlink" title="防火墙问题"></a>防火墙问题</h2><blockquote><p>因CentOS 7 防火墙未开放80端口导致本机不能成功访问虚拟机问题</p></blockquote><h3 id="CentOS-7-防火墙相关命令"><a href="#CentOS-7-防火墙相关命令" class="headerlink" title="CentOS 7 防火墙相关命令"></a>CentOS 7 防火墙相关命令</h3><p>查看已开放端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><p>开放<code>80</code>端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ContOS 7 防火墙命令改为 `firewall`, 而7以下的防火墙命令为 `iptables`(且具体命令也不同)</span><br><span class="line">sudo firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 其他指令含义：</span><br><span class="line">–zone  #作用域</span><br><span class="line">–add-port=80/tcp  #添加端口，格式为：端口/通讯协议</span><br><span class="line">–permanent  #永久生效，没有此参数重启后失效</span><br></pre></td></tr></table></figure><p>设置完成之后需<strong>重启</strong>防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --reload  #重启firewall</span><br><span class="line">sudo systemctl stop firewalld.service  #停止firewall</span><br><span class="line">sudo systemctl disable firewalld.service  #禁止firewall开机启动</span><br></pre></td></tr></table></figure><h3 id="CentOS-7以下防火墙相关命令"><a href="#CentOS-7以下防火墙相关命令" class="headerlink" title="CentOS 7以下防火墙相关命令"></a>CentOS 7以下防火墙相关命令</h3><p>开放80端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure><p>保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/rc.d/init.d/iptables save</span><br></pre></td></tr></table></figure><p>查看开放的端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/iptables status</span><br></pre></td></tr></table></figure><p>开启与关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 永久性生效，重启后不会复原</span><br><span class="line">sudo chkconfig iptables on  # 开启</span><br><span class="line">sudo chkconfig iptables off  # 关闭</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 即时生效，重启后复原</span><br><span class="line">sudo service iptables start  # 开启</span><br><span class="line">sudo service iptables stop  # 关闭</span><br></pre></td></tr></table></figure><ul><li><p>参考文章</p><p><a href="https://www.linuxidc.com/Linux/2016-09/134907.htm" target="_blank" rel="noopener">mafly</a></p><p><a href="https://blog.csdn.net/jack85986370/article/details/51169203" target="_blank" rel="noopener">Deep_Deep_Learning</a></p><p><a href="https://segmentfault.com/a/1190000014750417" target="_blank" rel="noopener">金武飞扬</a></p><p><a href="https://segmentfault.com/a/1190000018791822" target="_blank" rel="noopener">Guoye</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;em&gt;Nginx&lt;/em&gt; (engine x) 是一个高性能的&lt;code&gt;HTTP&lt;/code&gt;和&lt;code&gt;反向代理&lt;/code&gt;服务，也是一个&lt;code&gt;IMAP/POP3/SMTP&lt;/code&gt;服务。由俄罗斯人伊戈尔·赛索耶夫为
      
    
    </summary>
    
      <category term="中间件" scheme="https://sangedon.cn/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="学习笔记" scheme="https://sangedon.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="服务器" scheme="https://sangedon.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>博文列表</title>
    <link href="https://sangedon.cn/paper/%E6%94%B6%E8%97%8F%E5%88%97%E8%A1%A8/"/>
    <id>https://sangedon.cn/paper/收藏列表/</id>
    <published>2019-06-13T08:25:18.000Z</published>
    <updated>2020-10-10T04:25:51.020Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ul><li><a href="https://segmentfault.com/a/1190000015815061" target="_blank" rel="noopener">MySQL/InnoDB中，乐观锁、悲观锁、共享锁、排它锁、行锁、表锁、死锁概念的理解</a></li><li><a href="https://segmentfault.com/a/1190000008491597" target="_blank" rel="noopener">详细深入分析Java ClassLoader 工作机制</a></li><li><a href="https://segmentfault.com/a/1190000016085105" target="_blank" rel="noopener">Java内存模型</a></li><li><a href="https://juejin.im/post/5c6b9c09f265da2d8a55a855" target="_blank" rel="noopener">MySQL优化面试</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015815061&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL/InnoDB中，乐观锁、悲观锁、共享锁、排它
      
    
    </summary>
    
      <category term="收藏" scheme="https://sangedon.cn/categories/%E6%94%B6%E8%97%8F/"/>
    
    
      <category term="学习笔记" scheme="https://sangedon.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2019学习生活规划</title>
    <link href="https://sangedon.cn/paper/2019%E5%AD%A6%E4%B9%A0%E7%94%9F%E6%B4%BB%E8%A7%84%E5%88%92/"/>
    <id>https://sangedon.cn/paper/2019学习生活规划/</id>
    <published>2019-05-25T13:03:22.000Z</published>
    <updated>2020-09-23T05:14:55.464Z</updated>
    
    <content type="html"><![CDATA[<p>知之真切笃实处，即是行；行之明觉精察处，即是知，知行工夫本不可离。                — 知行录</p><a id="more"></a><h2 id="读书计划"><a href="#读书计划" class="headerlink" title="读书计划"></a>读书计划</h2><p>⭐️ 骗钱的    ⭐️⭐️ 内容一般，表达一般     ⭐️⭐️⭐️ 内容尚可，表达一般              一次就够</p><p>⭐️⭐️⭐️⭐️内容丰富，表达较好     ⭐️⭐️⭐️⭐️⭐️ 内容经典，表达较好                值得再看</p><ul><li style="list-style: none"><input type="checkbox" checked> HeadFirst 设计模式    ⭐️⭐️⭐️⭐️     <code>3.12</code>  </li><li style="list-style: none"><input type="checkbox" checked> Java 开发手册 ⭐️⭐️⭐️   <code>2.26</code></li><li style="list-style: none"><input type="checkbox" checked> 码处高效  ⭐️⭐️⭐️   <code>3.2</code></li><li style="list-style: none"><input type="checkbox" checked> 鸟哥的Linux私房菜  ⭐️⭐️⭐️    <code>前七章：3.19</code></li><li style="list-style: none"><input type="checkbox" checked> SQL必知必会   ⭐️⭐️⭐️  <code>3.5</code></li><li style="list-style: none"><input type="checkbox" checked> 高性能MySQL   ⭐️⭐️⭐️⭐️  <code>前六章：3.26</code></li><li style="list-style: none"><input type="checkbox" checked> 剑指Offer   ⭐️⭐️⭐️    <code>5.11</code></li><li style="list-style: none"><input type="checkbox" checked> Thinking In Java  ⭐️⭐️⭐️⭐️</li><li style="list-style: none"><input type="checkbox" checked> 程序源代码面试指南   ⭐️⭐️⭐️⭐️   <code>7.29</code></li><li style="list-style: none"><input type="checkbox" checked> 数据结构与算法分析   ⭐️⭐️⭐️  <code>2.18</code></li><li style="list-style: none"><input type="checkbox" checked> 深入理解JVM  ⭐️⭐️⭐️⭐️⭐️  <code>5.7</code></li><li style="list-style: none"><input type="checkbox" checked> Java并发编程之美  ⭐️⭐️⭐️⭐️  <code>7.07</code></li><li style="list-style: none"><input type="checkbox" checked> Java并发编程的艺术  ⭐️⭐️  <code>6.25</code></li><li style="list-style: none"><input type="checkbox" checked> JavaScript高级程序设计   ⭐️⭐️⭐️⭐️    <code>5.17</code></li><li style="list-style: none"><input type="checkbox" checked> 深入分析 Java Web 技术内幕   ⭐️⭐️    <code>7.12</code></li><li style="list-style: none"><input type="checkbox" checked> 大型网站技术架构—核心原理与案例分析  ⭐️⭐️⭐️⭐️  <code>7.03</code></li><li style="list-style: none"><input type="checkbox" checked> 网络是怎样跑起来的  ⭐️⭐️⭐️⭐️    <code>7.17</code></li><li style="list-style: none"><input type="checkbox" checked> 大话设计模式   ⭐️⭐️⭐️⭐️    <code>7.23</code></li><li style="list-style: none"><input type="checkbox" checked> spring 揭秘   ⭐️⭐️⭐️⭐️    <code>前8章 7.26</code></li><li style="list-style: none"><input type="checkbox" checked> Python 3 网络爬虫开发实战   ⭐️⭐️⭐️    <code>前6章 7.19</code>   </li><li style="list-style: none"><input type="checkbox"> 程序是怎样跑起来的</li><li style="list-style: none"><input type="checkbox"> Redis开发与运维</li><li style="list-style: none"><input type="checkbox"> Redis设计与实现</li><li style="list-style: none"><input type="checkbox"> netty实战</li><li style="list-style: none"><input type="checkbox"> Linux命令行与shell脚本编程大全</li><li style="list-style: none"><input type="checkbox"> 知行录</li></ul><h2 id="技术学习"><a href="#技术学习" class="headerlink" title="技术学习"></a>技术学习</h2><ul><li style="list-style: none"><input type="checkbox" checked> 深入学习理解Java基础知识，如动态代理，注解，反射等，提高面向对象编程的认识</li><li style="list-style: none"><input type="checkbox" checked> 理解Spring基本原理，MVC 框架以及Mybatis的基本实现思路</li><li style="list-style: none"><input type="checkbox" checked> 学习SpringBoot，了解其无配置的原理，理解 restful 风格编程</li><li style="list-style: none"><input type="checkbox"> 深入学习MySQL</li><li style="list-style: none"><input type="checkbox"> 学习 Redis</li><li style="list-style: none"><input type="checkbox"> 学习NIO以及netty框架</li><li style="list-style: none"><input type="checkbox"> 学习Nginx</li><li style="list-style: none"><input type="checkbox"> 学习Docker</li><li style="list-style: none"><input type="checkbox"> 学习 dubbo，了解RPC框架</li><li style="list-style: none"><input type="checkbox"> 了解服务器，如Tomcat，Jetty</li><li style="list-style: none"><input type="checkbox"> 了解Spring Cloud及分布式架构基础知识</li><li style="list-style: none"><input type="checkbox"> 继续学习Python</li></ul><h2 id="习惯培养"><a href="#习惯培养" class="headerlink" title="习惯培养"></a>习惯培养</h2><ul><li style="list-style: none"><input type="checkbox"> 每周六爬山</li><li style="list-style: none"><input type="checkbox"> 早睡</li><li style="list-style: none"><input type="checkbox"> 控制饮食口味，少辣</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知之真切笃实处，即是行；行之明觉精察处，即是知，知行工夫本不可离。                — 知行录&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://sangedon.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="规划" scheme="https://sangedon.cn/tags/%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁的概念及实现</title>
    <link href="https://sangedon.cn/paper/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <id>https://sangedon.cn/paper/分布式锁的概念及实现/</id>
    <published>2019-05-20T08:45:09.000Z</published>
    <updated>2020-10-21T14:16:25.408Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>对于运行在同一个JVM中的单进程程序而言，要实现线程同步操作可使用语言和类库提供的锁，而对于如今分布在不同服务器上运行的程序而言，要实现线程同步操作，语言和类库提供的锁已不能满足需求，因此，对于此类场景，则可使用分布式锁。分布式锁的实现有多种形式，常见的主要有三种实现方式，如：基于数据库乐观锁；基于 redis 的 set 操作；基于 zookeeper 临时有序节点的特性</p><h2 id="基于数据库实现"><a href="#基于数据库实现" class="headerlink" title="基于数据库实现"></a>基于数据库实现</h2><h3 id="基于数据库表"><a href="#基于数据库表" class="headerlink" title="基于数据库表"></a>基于数据库表</h3><blockquote><p>基于数据库的实现方式的核心思想是：在数据库中创建一个表，表中包含<strong>方法名（资源）</strong>等字段，并在<strong>方法名字段上创建唯一索引</strong>，想要执行某个方法，就使用这个方法名向表中插入数据，成功插入则获取锁，执行完成后删除对应的行数据释放锁。</p></blockquote><ul><li>创建被锁定方法或资源表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`methodLock`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`method_name`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'锁定的方法名'</span>,</span><br><span class="line">  <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'备注信息'</span>,</span><br><span class="line">  <span class="string">`update_time`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'保存数据时间，自动生成'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uidx_method_name`</span> (<span class="string">`method_name `</span>) <span class="keyword">USING</span> BTREE) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'锁定中的方法'</span>;</span><br></pre></td></tr></table></figure><ul><li>获取锁，锁定资源(方法或资源)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> methodLock(method_name,<span class="keyword">desc</span>) <span class="keyword">values</span> (‘method_name’,‘<span class="keyword">desc</span>’)</span><br></pre></td></tr></table></figure><p>当要获取资源或执行某个方法时，向表中插入该方法记录，由于方法名为唯一索引，所以插入成功则表明已成功获取锁，否则失败</p><ul><li>释放锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> methodLock <span class="keyword">where</span> method_name =<span class="string">'method_name'</span></span><br></pre></td></tr></table></figure><p>当方法执行完毕时，删除插入的记录即可释放锁，其他进程中的线程即可通过插入记录获取锁</p><h3 id="基于数据库排他锁"><a href="#基于数据库排他锁" class="headerlink" title="基于数据库排他锁"></a>基于数据库排他锁</h3><blockquote><p>除了可以通过增删操作数据表中的记录以外，其实还可以借助数据中自带的锁来实现分布式锁。我们还用刚刚创建的那张数据库表，通过数据库的排他锁来实现分布式锁。主要 基于MySql的InnoDB引擎，当进行<code>for update</code>操作时，数据库会在查询过程中为当前查询添加排它锁</p></blockquote><ul><li>获取锁(加锁)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    connection.setAutoCommit(<span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="comment">// 在查询语句后面增加`for update`，数据库会在查询过程中给数据库表增加排他锁</span></span><br><span class="line">            result = select * from methodLock where method_name=xxx <span class="keyword">for</span> update;</span><br><span class="line">            <span class="keyword">if</span>(result==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是：InnoDB引擎在加锁的时候，只有通过索引进行检索的时候才会使用行级锁，否则会使用表级锁。如果我们需要使用行级锁，就要为method_name添加索引，并且一定要创建成唯一索引，否则会出现多个重载方法之间无法同时被访问的问题。重载方法的话建议把参数类型也加上。当某条记录被加上排他锁之后，其他线程无法再在该行记录上增加排他锁。</p><p>我们可以认为获得排它锁的线程即获得了分布式锁，当获取到锁之后，就可以执行方法的业务逻辑，执行完方法之后，再通过提交事物方法解锁：</p><ul><li>释放锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    connection.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法可以有效的解决上面提到的无法释放锁和阻塞锁的问题。</p><ul><li><code>for update</code>语句会在执行成功后立即返回，在执行失败时一直处于阻塞状态，直到成功。</li><li>使用排它锁的方式，服务宕机之后数据库会自己把锁释放掉。</li></ul><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ol><li>无法直接解决数据库单点和可重入问题。</li><li>我们知道，Mysql执行查询语句之前会进行查询优化，因此，尽管我们对<code>method_name</code>使用了唯一索引，且使用<code>for update</code>来显示使用行级锁，但是查询时是否使用索引具体还要根据Mysql根据内部优化策略判断，如果数据量较小的时候，Mysql可能会认为全表扫描效率更高，则不会使用索引而导致InnoDB使用表锁，此时将导致需要获取其他锁的线程阻塞</li><li>如果某个事物长时间占用排它锁，导致长时间占用数据库连接，若类似的耗时连接较多，则数据库连接池将支持不住</li></ol><h3 id="可优化"><a href="#可优化" class="headerlink" title="可优化"></a>可优化</h3><ol><li>因为是基于数据库实现的，数据库的可用性和性能将直接影响分布式锁的可用性及性能，所以，数据库需要双机部署、数据同步、主从切换；</li><li>不具备可重入的特性，因为同一个线程在释放锁之前，行数据一直存在，无法再次成功插入数据，所以，需要在表中新增一列，用于记录当前获取到锁的机器和线程信息，在再次获取锁的时候，先查询表中机器和线程信息是否和当前机器和线程相同，若相同则直接获取锁；</li><li>没有锁失效机制，因为有可能出现成功插入数据后，服务器宕机了，对应的数据没有被删除，当服务恢复后一直获取不到锁，所以，需要在表中新增一列，用于记录失效时间，并且需要有定时任务清除这些失效的数据；</li><li>不具备阻塞锁特性，获取不到锁直接返回失败，所以需要优化获取逻辑，循环多次去获取。</li><li>在实施的过程中会遇到各种不同的问题，为了解决这些问题，实现方式将会越来越复杂；依赖数据库需要一定的资源开销，性能问题需要考虑。</li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>基于数据库实现的两种方式都是依赖数据库的一张表，一种是通过表中的记录是否存在判断是否持有分布式锁，另一种是通过数据库的排他锁来实现分布式锁。</p><p><strong>优点</strong></p><p>直接借助数据库，容易理解。</p><p><strong>缺点</strong></p><p>有各种各样的问题，在解决问题的过程中会使整个方案变得越来越复杂。</p><p>操作数据库需要一定的开销，性能问题需要考虑。</p><p>使用数据库的行级锁并不一定靠谱，尤其是当我们的锁表并不大的时候。</p></blockquote><h2 id="基于Redis实现"><a href="#基于Redis实现" class="headerlink" title="基于Redis实现"></a>基于Redis实现</h2><blockquote><p>利用Redis的<strong>set命令</strong>。此命令是原子性操作，只有在key不存在的情况下，才能成功。</p></blockquote><ul><li>加锁</li></ul><p>最简单的方法是使用<strong>set</strong>命令。例如想要给一种商品的秒杀活动加锁，key 为 “lock_sale_商品ID” ，value 假设为 11，若 ret 为 1，则表示加锁成功，为 0 则表示已存在 key，加锁失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加锁伪代码</span></span><br><span class="line"><span class="keyword">int</span> ret = set（key，<span class="number">1</span>）;</span><br></pre></td></tr></table></figure><ul><li>解锁</li></ul><p>当获取锁的线程执行完毕，需要释放锁，通过 <code>del</code>操作删除记录，当所释放之后，其他线程即可通过 <code>set</code>操作获取锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放锁伪代码</span></span><br><span class="line">del(key)</span><br></pre></td></tr></table></figure><ul><li>锁超时</li></ul><p>当某个获取所得线程在释放锁之前挂掉，该锁将会长期被占用导致共享资源无法为其他线程提供服务，因此需要为锁添加超时时间，以保证在锁在超时占用时也能被正常释放，Redis 2.6.12 之前 set 操作无法设置超时时间，因此 加锁和设置超时时间的操作为非原子性操作，这会导致在极端情况下，某线程获取锁之后，设置超时时间之前挂掉的话，将无法释放锁。好在后面的版本中 set 操作可设置超时时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加锁，设置超时时间 30s</span></span><br><span class="line"><span class="keyword">int</span> ret = set（key，<span class="number">1</span>，<span class="number">30</span>，NX）</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全过程伪代码如下</span></span><br><span class="line"><span class="keyword">if</span>（setnx（key，<span class="number">1</span>， <span class="number">30</span>， NX） == <span class="number">1</span>）&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> something ......</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        del（key）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 以上代码还有一个问题，即若线程A超时时长内方法未执行完毕，其他线程（线程B）在此期间也获取到了锁，则A执行完毕后删除锁，而此时的锁为B的锁，为避免这种情况，在删除锁之前需要判断是否是自己添加的锁，则value可设置为当前线程ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码如下</span></span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line">String threadId = Thread.currentThread().getId()</span><br><span class="line">set（key，threadId ，<span class="number">30</span>，NX）</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line"><span class="keyword">if</span>（threadId .equals(redisClient.get(key))）&#123;</span><br><span class="line">    del(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解锁操作中判断操作和解锁操作为非原子性操作，此时可通过lua代码来实现这一段代码</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String luaScript = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line"></span><br><span class="line">redisClient.eval(luaScript , Collections.singletonList(key), Collections.singletonList(threadId));</span><br></pre></td></tr></table></figure><p>此时已经解决了大部分问题，但是多个线程同步操作共享资源时，由于过期时间到达而方法未执行完毕，其他线程还是可以获取同步锁，可通过在获取同步锁的同时开启一个守护线程，例如 过期时间30s 则在29s时，将超时时间延长 一定的时间已达到续航的目的，但是需要注意的是，在方法执行完毕时，一定要手动关闭守护线程</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><blockquote><p>使用缓存来代替数据库来实现分布式锁，可以提供更好的性能，同时，很多缓存服务都是集群部署的，可以避免单点问题。并且很多缓存服务都提供了可以用来实现分布式锁的方法，比如redis的setnx方法等。并且，这些缓存服务也都提供了对数据的过期自动删除的支持，可以直接设置超时时间来控制锁的释放。</p><p><strong>优点</strong></p><p>性能好，实现起来较为方便。</p><p><strong>缺点</strong></p><p>通过超时时间来控制锁的失效时间并不是十分的靠谱。</p></blockquote><h2 id="基于zookeeper实现"><a href="#基于zookeeper实现" class="headerlink" title="基于zookeeper实现"></a>基于zookeeper实现</h2><blockquote><p>每个客户端对某个方法加锁时，在zookeeper上的与该方法对应的指定节点的目录下，生成一个临时有序节点。 判断是否获取锁的方式很简单，只需要判断有序节点中序号最小的一个。 当释放锁的时候，只需将这个临时节点删除即可。</p></blockquote><p>Zookeeper的数据结构就像一棵树，由节点（Znode）组成，节点分为四类，利用Zookeeper实现分布式锁主要使用其临时顺序节点的特性完成，节点分类及特性如下：</p><ul><li>持久节点</li></ul><p>默认的节点类型。创建节点的客户端与zookeeper断开连接后，该节点依旧存在 。</p><ul><li>持久顺序节点</li></ul><p>所谓顺序节点，就是在创建节点时，Zookeeper根据创建的时间顺序给该节点名称进行编号。</p><ul><li>临时节点</li></ul><p>和持久节点相反，当创建节点的客户端与zookeeper断开连接后，临时节点会被删除</p><ul><li>临时顺序节点</li></ul><p>临时顺序节点结合和临时节点和顺序节点的特点：在创建节点时，Zookeeper根据创建的时间顺序给该节点名称进行编号；当创建节点的客户端与zookeeper断开连接后，临时节点会被删除。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ul><li>获取锁</li></ul><ol><li>在Zookeeper当中创建一个持久节点ParentLock。当第一个客户端想要获得锁时，需要在ParentLock这个节点下面创建一个<strong>临时顺序节点</strong> Lock1。</li><li>Client1查找ParentLock下面所有的临时顺序节点并排序，判断自己所创建的节点Lock1是不是顺序最靠前的一个。如果是第一个节点，则成功获得锁。</li><li>如果再有一个客户端 Client2 前来获取锁，则在ParentLock下载再创建一个临时顺序节点Lock2。</li><li>Client2查找ParentLock下面所有的临时顺序节点并排序，判断自己所创建的节点Lock2是不是顺序最靠前的一个，结果发现节点Lock2并不是最小的。</li><li>Client2向排序仅比它靠前的节点Lock1注册<strong>Watcher</strong>，用于监听Lock1节点是否存在。这意味着Client2抢锁失败，进入了等待状态。</li><li>如果又有一个客户端Client3前来获取锁，则在ParentLock下载再创建一个临时顺序节点Lock3。</li><li>Client3查找ParentLock下面所有的临时顺序节点并排序，判断自己所创建的节点Lock3是不是顺序最靠前的一个，结果同样发现节点Lock3并不是最小的。于是，Client3向排序仅比它靠前的节点<strong>Lock2</strong>注册Watcher，用于监听Lock2节点是否存在。这意味着Client3同样抢锁失败，进入了等待状态。</li><li>这样一来，Client1得到了锁，Client2监听了Lock1，Client3监听了Lock2。这恰恰形成了一个等待队列，很像是Java当中ReentrantLock所依赖的<strong>AQS</strong>（AbstractQueuedSynchronizer）。</li></ol><ul><li>释放锁</li></ul><p>释放锁分为两种情况：</p><ul><li><ul><li>任务完成，客户端显示释放</li></ul></li></ul><p>当任务完成时，Client1会显示调用删除节点Lock1的指令。</p><ul><li><ul><li>任务执行过程中，客户端崩溃</li></ul><p>获得锁的Client1在任务执行过程中，如果程序崩溃，则会断开与Zookeeper服务端的链接。根据临时节点的特性，相关联的节点Lock1会随之自动删除。</p></li></ul><p>由于Client2一直监听着Lock1的存在状态，当Lock1节点被删除，Client2会立刻收到通知。这时候Client2会再次查询ParentLock下面的所有节点，确认自己创建的节点Lock2是不是目前最小的节点。如果是最小，则Client2顺理成章获得了锁。</p><p>同理，如果Client2也因为任务完成或者节点崩溃而删除了节点Lock2，那么Client3就会接到通知。最终，Client3成功得到了锁。</p><h3 id="Zookeeper可解决问题"><a href="#Zookeeper可解决问题" class="headerlink" title="Zookeeper可解决问题"></a>Zookeeper可解决问题</h3><ul><li>使用Zookeeper可以有效的解决锁无法释放的问题，因为在创建锁的时候，客户端会在ZK中创建一个临时节点，一旦客户端获取到锁之后突然挂掉（Session连接断开），那么这个临时节点就会自动删除掉。其他客户端就可以再次获得锁。</li><li>使用Zookeeper可以实现阻塞的锁，客户端可以通过在ZK中创建顺序节点，并且在节点上绑定监听器，一旦节点有变化，Zookeeper会通知客户端，客户端可以检查自己创建的节点是不是当前所有节点中序号最小的，如果是，那么自己就获取到锁，便可以执行业务逻辑了。</li><li>使用Zookeeper也可以有效的解决不可重入的问题，客户端在创建节点的时候，把当前客户端的主机信息和线程信息直接写入到节点中，下次想要获取锁的时候和当前最小的节点中的数据比对一下就可以了。如果和自己的信息一样，那么自己直接获取到锁，如果不一样就再创建一个临时的顺序节点，参与排队。</li><li>使用Zookeeper可以有效的解决单点问题，ZK是集群部署的，只要集群中有半数以上的机器存活，就可以对外提供服务。</li></ul><h3 id="使用Zookeeper存在的问题"><a href="#使用Zookeeper存在的问题" class="headerlink" title="使用Zookeeper存在的问题"></a>使用Zookeeper存在的问题</h3><p>使用ZK实现的分布式锁好像完全符合了本文开头我们对一个分布式锁的所有期望。但是，其实并不是，Zookeeper实现的分布式锁其实存在一个缺点，那就是性能上可能并没有缓存服务那么高。因为每次在创建锁和释放锁的过程中，都要动态创建、销毁瞬时节点来实现锁功能。ZK中创建和删除节点只能通过Leader服务器来执行，然后将数据同步到所有的Follower机器上。</p><p>其实，使用Zookeeper也有可能带来并发问题，只是并不常见而已。考虑这样的情况，由于网络抖动，客户端可ZK集群的session连接断了，那么zk以为客户端挂了，就会删除临时节点，这时候其他客户端就可以获取到分布式锁了。就可能产生并发问题。这个问题不常见是因为zk有重试机制，一旦zk集群检测不到客户端的心跳，就会重试，Curator客户端支持多种重试策略。多次重试之后还不行的话才会删除临时节点。（所以，选择一个合适的重试策略也比较重要，要在锁的粒度和并发之间找一个平衡。）</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><blockquote><p><strong>优点</strong></p><p>有效的解决单点问题，不可重入问题，非阻塞问题以及锁无法释放的问题。实现起来较为简单。</p><p><strong>缺点</strong></p><p>性能上不如使用缓存实现分布式锁。 需要对ZK的原理有所了解。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面三种方式，均无法在复杂性、可靠性、性能等方面无法同时满足，所以，我们需要根据不同的应用场景选择适合的实现方式。</p><ul><li>数据库实现容易理解，且易于实现，但是性能和可靠性方面较差</li><li>Zookeeper实现方式最难理解和实现，但是可靠性好</li><li>Redis实现方式性能较好，可靠性稍差与zookeeper</li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://mp.weixin.qq.com/s/8fdBKAyHZrfHmSajXT_dnA" target="_blank" rel="noopener">程序员小灰</a></p><p><a href="https://mp.weixin.qq.com/s/xcd8NWYMzpVJ3UKlGPIt9g" target="_blank" rel="noopener">Java后端技术</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;对于运行在同一个JVM中的单进程程序而言，要实现线程同步操作可使用语言和类库提供的锁，而对于如今分布在不同服务器上运行的程序而言，要实现线程同步操作，语言和类库提供的锁已不能满足需求，因此，对于此类场景，则可使用分布式锁。分布式锁的实现有
      
    
    </summary>
    
      <category term="Java" scheme="https://sangedon.cn/categories/Java/"/>
    
    
      <category term="学习笔记" scheme="https://sangedon.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="分布式" scheme="https://sangedon.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口问题</title>
    <link href="https://sangedon.cn/paper/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E9%97%AE%E9%A2%98/"/>
    <id>https://sangedon.cn/paper/滑动窗口问题/</id>
    <published>2019-05-20T07:16:23.000Z</published>
    <updated>2020-09-23T05:14:55.473Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>滑动窗口是数组/字符串问题中常用的抽象概念。 窗口通常是在数组/字符串中由开始和结束索引定义的一系列元素的集合，即 [i, j)（左闭，右开）。而滑动窗口是可以将两个边界向某一方向“滑动”的窗口。例如，我们将 [i, j) 向右滑动 1 个元素，则它将变为 [i+1, j+1)（左闭，右开）。</p><blockquote><h4 id="问题：给定一个字符串，请你找出其中不含有重复字符的-最长子串-的长度。"><a href="#问题：给定一个字符串，请你找出其中不含有重复字符的-最长子串-的长度。" class="headerlink" title="问题：给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。"></a><strong>问题</strong>：给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</h4></blockquote><ul><li><p>暴力法</p></li><li><ul><li>比较暴力的方法，嵌套两次循环，时间复杂度为<strong>O(n^2</strong>)，具体思路为：使用一个双端队列，保存遍历到当前字符时不重复的字符串，下一个字符如果存在于队列中，则遍历到下一个字符时的子串长度为两个重复字符之间的距离，否则为上一个不重复子串长度加1</li></ul><p><strong>本方法适用于记录每一个不重复子串的求解，不适用于仅需要最长子串长度的求解</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;Character&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(s.charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; s.length())&#123;</span><br><span class="line">            <span class="keyword">char</span> temp = s.charAt(index);</span><br><span class="line">            <span class="keyword">int</span> s1 = isInQueue(queue, temp);</span><br><span class="line">            <span class="keyword">if</span> (s1 &gt;= max)&#123;</span><br><span class="line">                max = s1;</span><br><span class="line">            &#125;</span><br><span class="line">            index ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回队列中与目标字符相同字符的距离，即遍历到当前字符时最长不重复长度</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">isInQueue</span><span class="params">(LinkedList&lt;Character&gt; queue, <span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        LinkedList&lt;Character&gt; queueT = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span> (queue.peekLast()!=c)&#123;</span><br><span class="line">                queueT.offer(queue.pollLast());</span><br><span class="line">                flag ++;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!queueT.isEmpty())&#123;</span><br><span class="line">            queue.offer(queueT.pollLast());</span><br><span class="line">        &#125;</span><br><span class="line">        queue.offer(c);</span><br><span class="line">        <span class="keyword">return</span> flag + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用hash表记录不重复子串的字符，可分别使用<code>Set</code>和<code>Map or char[256]</code>字符数组</li><li><ul><li>使用<code>Set</code>， 时间复杂度为<strong>O(2n) —&gt; O(n)</strong>，通过使用 <strong>hash</strong>表作为滑动窗口，检查当前字符是否在不重复子串中仅需<strong>O(1)</strong>的时间，当前使用 <code>HashSet</code> 将字符存储在当前窗口<code>[i, j)</code>）中。 然后向右侧滑动索引 <code>j</code>，如果它不在 <code>HashSet</code> 中，我们会继续滑动<code>j</code>。直到<code>s[j]</code>已经存在于 <code>HashSet</code> 中。此时，找到的没有重复字符的最长子字符串将会以索引 <code>i</code>开头。当对所有的 <code>i</code> 这样做，就可以得到答案。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j &amp;&amp; j &lt; s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.contains(s.charAt(j)))&#123;</span><br><span class="line">                set.add(s.charAt(j++));</span><br><span class="line">                max = Math.max(max, j - i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set.remove(s.charAt(i ++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ul><li>使用<code>HashMap</code>，时间复杂度为<code>O(n)</code>定义字符到索引的映射，而不是使用集合来判断一个字符是否存在。 当找到重复的字符时，可以立即跳过该窗口，也就是说，如果 <code>s[j]</code>在 <code>[i, j)</code>有与<code>j&#39;</code>的字符，我们不需要逐渐增加<code>i</code>以直接跳过<code>[i，j&#39;]</code>，并将<code>j&#39; + 1</code>。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s.charAt(j))) &#123;</span><br><span class="line">                i = Math.max(map.get(s.charAt(j)), i);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">            map.put(s.charAt(j), j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ul><li>使用<code>char</code>数组代替<code>HashMap</code>，时间复杂度为<code>O(n)</code>，将会节省一定的空间，具体思路同<code>HashMap</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>]; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            i = Math.max(index[s.charAt(j)], i);</span><br><span class="line">            ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">            index[s.charAt(j)] = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="问题：有一个整形数组arr和一个大小为k的窗口从数组最左边滑动到最右边，窗口每次滑动一个位置，返回每个窗口内的最大值组成的数组"><a href="#问题：有一个整形数组arr和一个大小为k的窗口从数组最左边滑动到最右边，窗口每次滑动一个位置，返回每个窗口内的最大值组成的数组" class="headerlink" title="问题：有一个整形数组arr和一个大小为k的窗口从数组最左边滑动到最右边，窗口每次滑动一个位置，返回每个窗口内的最大值组成的数组"></a>问题：有一个整形数组<code>arr</code>和一个大小为<code>k</code>的窗口从数组最左边滑动到最右边，窗口每次滑动一个位置，返回每个窗口内的最大值组成的数组</h4></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;滑动窗口是数组/字符串问题中常用的抽象概念。 窗口通常是在数组/字符串中由开始和结束索引定义的一系列元素的集合，即 [i, j)（左闭，右开）。而滑动窗口是可以将两个边界向某一方向“滑动”的窗口。例如，我们将 [i, j) 向右滑动 1 
      
    
    </summary>
    
      <category term="算法" scheme="https://sangedon.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="LeetCode" scheme="https://sangedon.cn/tags/LeetCode/"/>
    
  </entry>
  
</feed>
